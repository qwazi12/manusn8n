{
  "node_types": {
    "n8n-nodes-base.httpRequest": 35,
    "@n8n/n8n-nodes-langchain.chatTrigger": 3,
    "@n8n/n8n-nodes-langchain.outputParserStructured": 4,
    "@n8n/n8n-nodes-langchain.lmChatOpenAi": 10,
    "n8n-nodes-base.stickyNote": 28,
    "@n8n/n8n-nodes-langchain.toolThink": 3,
    "@n8n/n8n-nodes-langchain.agent": 6,
    "n8n-nodes-base.scheduleTrigger": 6,
    "n8n-nodes-base.googleSheets": 14,
    "n8n-nodes-base.slack": 1,
    "n8n-nodes-base.code": 5,
    "n8n-nodes-base.if": 2,
    "n8n-nodes-base.youTube": 3,
    "@n8n/n8n-nodes-langchain.chainLlm": 4,
    "@n8n/n8n-nodes-langchain.outputParserItemList": 1,
    "@n8n/n8n-nodes-langchain.openAi": 6,
    "n8n-nodes-base.wait": 8,
    "n8n-nodes-base.googleDrive": 4,
    "n8n-nodes-base.merge": 2,
    "n8n-nodes-base.set": 2,
    "n8n-nodes-base.manualTrigger": 1,
    "@n8n/n8n-nodes-langchain.vectorStorePinecone": 2,
    "@n8n/n8n-nodes-langchain.documentDefaultDataLoader": 1,
    "@n8n/n8n-nodes-langchain.embeddingsOpenAi": 2,
    "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter": 1,
    "@n8n/n8n-nodes-langchain.toolVectorStore": 1,
    "@n8n/n8n-nodes-langchain.memoryBufferWindow": 2,
    "@n8n/n8n-nodes-langchain.lmChatOpenRouter": 1,
    "n8n-nodes-mcp.mcpClientTool": 1,
    "n8n-nodes-base.googleDriveTool": 1,
    "n8n-nodes-mcp.mcpClient": 2,
    "n8n-nodes-base.switch": 2,
    "n8n-nodes-base.gmailTool": 2,
    "n8n-nodes-base.googleCalendarTool": 2,
    "@n8n/n8n-nodes-langchain.toolCalculator": 1,
    "n8n-nodes-base.notionTool": 1,
    "@n8n/n8n-nodes-langchain.toolSerpApi": 1,
    "n8n-nodes-base.telegramTrigger": 1,
    "n8n-nodes-base.telegram": 3
  },
  "node_patterns": {},
  "connection_patterns": [],
  "common_parameters": {
    "n8n-nodes-base.httpRequest": {
      "method": 25,
      "url": 35,
      "authentication": 6,
      "genericAuthType": 6,
      "sendBody": 25,
      "specifyBody": 16,
      "jsonBody": 16,
      "options": 35,
      "sendQuery": 2,
      "queryParameters": 2,
      "sendHeaders": 25,
      "headerParameters": 25,
      "contentType": 8,
      "rawContentType": 8,
      "body": 8,
      "bodyParameters": 1
    },
    "@n8n/n8n-nodes-langchain.chatTrigger": {
      "options": 3,
      "public": 2,
      "initialMessages": 1
    },
    "@n8n/n8n-nodes-langchain.outputParserStructured": {
      "jsonSchemaExample": 4
    },
    "@n8n/n8n-nodes-langchain.lmChatOpenAi": {
      "model": 10,
      "options": 10
    },
    "n8n-nodes-base.stickyNote": {
      "content": 28,
      "height": 25,
      "width": 28,
      "color": 28
    },
    "@n8n/n8n-nodes-langchain.toolThink": {
      "description": 3
    },
    "@n8n/n8n-nodes-langchain.agent": {
      "hasOutputParser": 3,
      "options": 6,
      "promptType": 1,
      "text": 1
    },
    "n8n-nodes-base.scheduleTrigger": {
      "rule": 6
    },
    "n8n-nodes-base.googleSheets": {
      "operation": 8,
      "documentId": 14,
      "sheetName": 14,
      "columns": 8,
      "options": 14,
      "filtersUI": 6
    },
    "n8n-nodes-base.slack": {
      "authentication": 1,
      "select": 1,
      "channelId": 1,
      "text": 1,
      "otherOptions": 1
    },
    "n8n-nodes-base.code": {
      "mode": 2,
      "jsCode": 5
    },
    "n8n-nodes-base.if": {
      "conditions": 2,
      "looseTypeValidation": 2,
      "options": 2
    },
    "n8n-nodes-base.youTube": {
      "resource": 3,
      "returnAll": 1,
      "filters": 1,
      "options": 3,
      "operation": 2,
      "title": 2,
      "regionCode": 2,
      "categoryId": 2
    },
    "@n8n/n8n-nodes-langchain.chainLlm": {
      "promptType": 4,
      "text": 4,
      "messages": 3,
      "hasOutputParser": 2
    },
    "@n8n/n8n-nodes-langchain.outputParserItemList": {
      "options": 1
    },
    "@n8n/n8n-nodes-langchain.openAi": {
      "modelId": 5,
      "messages": 4,
      "options": 6,
      "jsonOutput": 2,
      "resource": 2,
      "operation": 2,
      "text": 1,
      "imageUrls": 1
    },
    "n8n-nodes-base.wait": {
      "amount": 8,
      "unit": 2
    },
    "n8n-nodes-base.googleDrive": {
      "name": 2,
      "driveId": 2,
      "folderId": 2,
      "options": 4,
      "operation": 3,
      "fileId": 2,
      "permissionsUi": 1,
      "content": 1
    },
    "n8n-nodes-base.merge": {
      "mode": 2,
      "combineBy": 2,
      "numberInputs": 1,
      "options": 2
    },
    "n8n-nodes-base.set": {
      "mode": 1,
      "jsonOutput": 1,
      "options": 2,
      "assignments": 1
    },
    "@n8n/n8n-nodes-langchain.vectorStorePinecone": {
      "mode": 1,
      "pineconeIndex": 2,
      "options": 2
    },
    "@n8n/n8n-nodes-langchain.documentDefaultDataLoader": {
      "dataType": 1,
      "options": 1
    },
    "@n8n/n8n-nodes-langchain.embeddingsOpenAi": {
      "options": 2
    },
    "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter": {
      "chunkSize": 1,
      "chunkOverlap": 1,
      "options": 1
    },
    "@n8n/n8n-nodes-langchain.toolVectorStore": {
      "name": 1,
      "description": 1
    },
    "@n8n/n8n-nodes-langchain.memoryBufferWindow": {
      "contextWindowLength": 1,
      "sessionIdType": 1,
      "sessionKey": 1
    },
    "@n8n/n8n-nodes-langchain.lmChatOpenRouter": {
      "model": 1,
      "options": 1
    },
    "n8n-nodes-mcp.mcpClientTool": {
      "operation": 1,
      "toolName": 1,
      "toolParameters": 1
    },
    "n8n-nodes-base.googleDriveTool": {
      "operation": 1,
      "content": 1,
      "name": 1,
      "driveId": 1,
      "folderId": 1,
      "options": 1
    },
    "n8n-nodes-mcp.mcpClient": {
      "operation": 1,
      "toolName": 1,
      "toolParameters": 1
    },
    "n8n-nodes-base.switch": {
      "rules": 2,
      "options": 2
    },
    "n8n-nodes-base.gmailTool": {
      "sendTo": 1,
      "subject": 1,
      "emailType": 1,
      "message": 1,
      "options": 1,
      "operation": 1,
      "limit": 1,
      "filters": 1
    },
    "n8n-nodes-base.googleCalendarTool": {
      "operation": 1,
      "calendar": 2,
      "timeMin": 1,
      "options": 1,
      "start": 1,
      "end": 1,
      "useDefaultReminders": 1,
      "additionalFields": 1
    },
    "n8n-nodes-base.notionTool": {
      "resource": 1,
      "databaseId": 1,
      "simple": 1
    },
    "@n8n/n8n-nodes-langchain.toolSerpApi": {
      "options": 1
    },
    "n8n-nodes-base.telegramTrigger": {
      "updates": 1,
      "additionalFields": 1
    },
    "n8n-nodes-base.telegram": {
      "resource": 1,
      "fileId": 1,
      "chatId": 2,
      "text": 1,
      "additionalFields": 2,
      "operation": 1,
      "binaryData": 1
    }
  },
  "workflow_structures": [
    {
      "name": "n2 - Think Tool workflow toolkit",
      "node_count": 23,
      "node_types": [
        "n8n-nodes-base.httpRequest",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.httpRequest",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.toolThink",
        "n8n-nodes-base.httpRequest",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.toolThink",
        "@n8n/n8n-nodes-langchain.toolThink",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.agent"
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent 1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent 3",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent 3",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser1": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent 1",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model1": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent 1",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Think1": {
          "ai_tool": [
            [
              {
                "node": "AI Agent 1",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser2": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent 2",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model2": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent 2",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Think2": {
          "ai_tool": [
            [
              {
                "node": "AI Agent 2",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Think3": {
          "ai_tool": [
            [
              {
                "node": "AI Agent 3",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent 2": {
          "main": [
            [
              {
                "node": "Example HTTP Request2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent 3": {
          "main": [
            [
              {
                "node": "Example HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent 1": {
          "main": [
            [
              {
                "node": "Example HTTP Request1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "\ud83e\udd5a R18 | AI Music Creator Agent v2.0 _ Receiver",
      "node_count": 0,
      "node_types": [],
      "connections": {}
    },
    {
      "name": "\ud83e\udd5a R18 | AI Music Creator Agent v2.0 _ Requester",
      "node_count": 0,
      "node_types": [],
      "connections": {}
    },
    {
      "name": "R23 | YouTube Curator AI Agent",
      "node_count": 11,
      "node_types": [
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.slack",
        "n8n-nodes-base.code",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "n8n-nodes-base.if",
        "n8n-nodes-base.if",
        "n8n-nodes-base.youTube",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.googleSheets",
        "@n8n/n8n-nodes-langchain.chainLlm"
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Search [keyword] on YT",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add to Sheet": {
          "main": [
            [
              {
                "node": "Get Rows Today",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Calc Metrics": {
          "main": [
            [
              {
                "node": "Only Good Videos",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Engine": {
          "ai_languageModel": [
            [
              {
                "node": "\ud83e\udd16 R.O.B.O.",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Only Good Videos": {
          "main": [
            [
              {
                "node": "Add to Sheet",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Only Top Videos": {
          "main": [
            [
              {
                "node": "\ud83e\udd16 R.O.B.O.",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Search [keyword] on YT": {
          "main": [
            [
              {
                "node": "Get YT Details",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get YT Details": {
          "main": [
            [
              {
                "node": "Calc Metrics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Rows Today": {
          "main": [
            [
              {
                "node": "Only Top Videos",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "\ud83e\udd16 R.O.B.O.": {
          "main": [
            [
              {
                "node": "Send on Slack",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R24 | Faceless POV AI Agent",
      "node_count": 31,
      "node_types": [
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.googleSheets",
        "@n8n/n8n-nodes-langchain.chainLlm",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.outputParserItemList",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.openAi",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.googleDrive",
        "n8n-nodes-base.googleDrive",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.merge",
        "n8n-nodes-base.code",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.youTube",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.httpRequest"
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Google Sheets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Sheets": {
          "main": [
            [
              {
                "node": "Generate Titles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "Generate Titles",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Item List Output Parser": {
          "ai_outputParser": [
            [
              {
                "node": "Generate Titles",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Generate Titles": {
          "main": [
            [
              {
                "node": "OpenAI",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI": {
          "main": [
            [
              {
                "node": "Text-to-Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Text-to-Image": {
          "main": [
            [
              {
                "node": "Wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait": {
          "main": [
            [
              {
                "node": "Get Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Image": {
          "main": [
            [
              {
                "node": "Image-to-Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Image-to-Video": {
          "main": [
            [
              {
                "node": "Wait1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait1": {
          "main": [
            [
              {
                "node": "Get Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Video": {
          "main": [
            [
              {
                "node": "Text-to-Sound",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text-to-Sound": {
          "main": [
            [
              {
                "node": "Upload MP3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload MP3": {
          "main": [
            [
              {
                "node": "Update Access",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge",
                "type": "main",
                "index": 2
              }
            ]
          ]
        },
        "Update Access": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 3
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "List Elements",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "List Elements": {
          "main": [
            [
              {
                "node": "Render Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Render Video": {
          "main": [
            [
              {
                "node": "Final Video Link",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger2": {
          "main": [
            [
              {
                "node": "Get Video Link",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Video Link": {
          "main": [
            [
              {
                "node": "Get Video FIle",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Video FIle": {
          "main": [
            [
              {
                "node": "YouTube",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R25 | The Ultimate Publishing Agent",
      "node_count": 15,
      "node_types": [
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.set",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.stickyNote"
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Google Sheets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Sheets": {
          "main": [
            [
              {
                "node": "Set Blotato IDs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Blotato IDs": {
          "main": [
            [
              {
                "node": "Ready Video in Blotato",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Ready Video in Blotato": {
          "main": [
            [
              {
                "node": "\ud83c\udfb5 TIKTOK",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83d\udd3aYOUTUBE",
                "type": "main",
                "index": 0
              },
              {
                "node": "Update Gsheet",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83d\udcf7 INSTAGRAM",
                "type": "main",
                "index": 0
              },
              {
                "node": "\u2716\ufe0f TWITTER",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83d\udcd8 FACEBOOK",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83e\uddf5 THREADS",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83d\udccd PINTEREST",
                "type": "main",
                "index": 0
              },
              {
                "node": "\u2601\ufe0f BLUESKY",
                "type": "main",
                "index": 0
              },
              {
                "node": "\ud83d\udc54 LINKEDIN",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R26 | STEP 1 Build the Database - robonuggets",
      "node_count": 10,
      "node_types": [
        "n8n-nodes-base.manualTrigger",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.code",
        "n8n-nodes-base.googleDrive",
        "n8n-nodes-base.googleDrive",
        "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter"
      ],
      "connections": {
        "When clicking \u2018Test workflow\u2019": {
          "main": [
            [
              {
                "node": "Get Vids",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Vids": {
          "main": [
            [
              {
                "node": "Get Transcript",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Transcript": {
          "main": [
            [
              {
                "node": "Clean Text",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Clean Text": {
          "main": [
            [
              {
                "node": "Create .txt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create .txt": {
          "main": [
            [
              {
                "node": "Download .txt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download .txt": {
          "main": [
            [
              {
                "node": "Pinecone Vector Store",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Default Data Loader": {
          "ai_document": [
            [
              {
                "node": "Pinecone Vector Store",
                "type": "ai_document",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI": {
          "ai_embedding": [
            [
              {
                "node": "Pinecone Vector Store",
                "type": "ai_embedding",
                "index": 0
              }
            ]
          ]
        },
        "Chunks": {
          "ai_textSplitter": [
            [
              {
                "node": "Default Data Loader",
                "type": "ai_textSplitter",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_count": 9,
      "node_types": [
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.toolVectorStore",
        "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi"
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Answer questions with a vector store": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Pinecone Vector Store": {
          "ai_vectorStore": [
            [
              {
                "node": "Answer questions with a vector store",
                "type": "ai_vectorStore",
                "index": 0
              }
            ]
          ]
        },
        "Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Embeddings": {
          "ai_embedding": [
            [
              {
                "node": "Pinecone Vector Store",
                "type": "ai_embedding",
                "index": 0
              }
            ]
          ]
        },
        "Model2": {
          "ai_languageModel": [
            [
              {
                "node": "Answer questions with a vector store",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R27 | Infinite AI Leads Agent",
      "node_count": 7,
      "node_types": [
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "n8n-nodes-mcp.mcpClientTool",
        "n8n-nodes-base.googleDriveTool",
        "n8n-nodes-mcp.mcpClient",
        "n8n-nodes-mcp.mcpClient"
      ],
      "connections": {
        "AI Agent": {
          "main": [
            []
          ]
        },
        "OpenRouter Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MCP Google Maps": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Google Drive": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "My workflow 5",
      "node_count": 21,
      "node_types": [
        "n8n-nodes-base.googleSheets",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.switch",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.youTube",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.googleSheets",
        "@n8n/n8n-nodes-langchain.chainLlm",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.httpRequest"
      ],
      "connections": {
        "Google Sheets": {
          "main": [
            [
              {
                "node": "Prompts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "Prompts",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser": {
          "ai_outputParser": [
            [
              {
                "node": "Prompts",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Wait": {
          "main": [
            [
              {
                "node": "Get VIdeo URL",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch": {
          "main": [
            [
              {
                "node": "Add Video URL",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Wait1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Error Log",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "YouTube": {
          "main": [
            [
              {
                "node": "Mark as Done",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait1": {
          "main": [
            [
              {
                "node": "Get VIdeo URL",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Google Sheets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add Video URL": {
          "main": [
            [
              {
                "node": "Get Video File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get VIdeo URL": {
          "main": [
            [
              {
                "node": "Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Video File": {
          "main": [
            [
              {
                "node": "YouTube",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prompts": {
          "main": [
            [
              {
                "node": "Get Music",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Music": {
          "main": [
            [
              {
                "node": "Create Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Video": {
          "main": [
            [
              {
                "node": "Wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_count": 28,
      "node_types": [
        "n8n-nodes-base.scheduleTrigger",
        "@n8n/n8n-nodes-langchain.openAi",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.googleSheets",
        "@n8n/n8n-nodes-langchain.openAi",
        "n8n-nodes-base.code",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.openAi",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "@n8n/n8n-nodes-langchain.openAi",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.merge",
        "n8n-nodes-base.code",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.stickyNote",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.wait",
        "n8n-nodes-base.wait"
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Create New Idea",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create New Idea": {
          "main": [
            [
              {
                "node": "Log the Idea",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Log the Idea": {
          "main": [
            [
              {
                "node": "Generate Prompts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate Prompts": {
          "main": [
            [
              {
                "node": "Unbundle Prompts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Unbundle Prompts": {
          "main": [
            [
              {
                "node": "Create Images",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Images": {
          "main": [
            [
              {
                "node": "Wait for Images",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Images": {
          "main": [
            [
              {
                "node": "Video Prompts",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Video Prompts": {
          "main": [
            [
              {
                "node": "Create Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Video": {
          "main": [
            [
              {
                "node": "Wait for Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Video": {
          "main": [
            [
              {
                "node": "Sound Prompts",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sound Prompts": {
          "main": [
            [
              {
                "node": "Create Sounds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Sounds": {
          "main": [
            [
              {
                "node": "Wait for Sounds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Sounds": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "List Elements",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "List Elements": {
          "main": [
            [
              {
                "node": "Sequence Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sequence Video": {
          "main": [
            [
              {
                "node": "Wait for Final Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Final Video": {
          "main": [
            [
              {
                "node": "Log Final Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait for Video": {
          "main": [
            [
              {
                "node": "Get Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait for Sounds": {
          "main": [
            [
              {
                "node": "Get Sounds",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait for Final Video": {
          "main": [
            [
              {
                "node": "Get Final Video",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait for Images": {
          "main": [
            [
              {
                "node": "Get Images",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    },
    {
      "name": "Samantha_AI",
      "node_count": 20,
      "node_types": [
        "n8n-nodes-base.switch",
        "n8n-nodes-base.gmailTool",
        "n8n-nodes-base.gmailTool",
        "n8n-nodes-base.googleCalendarTool",
        "n8n-nodes-base.googleCalendarTool",
        "@n8n/n8n-nodes-langchain.toolCalculator",
        "n8n-nodes-base.notionTool",
        "@n8n/n8n-nodes-langchain.toolSerpApi",
        "n8n-nodes-base.telegramTrigger",
        "n8n-nodes-base.set",
        "n8n-nodes-base.telegram",
        "@n8n/n8n-nodes-langchain.openAi",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "n8n-nodes-base.telegram",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.telegram",
        "@n8n/n8n-nodes-langchain.chainLlm"
      ],
      "connections": {
        "Switch": {
          "main": [
            [
              {
                "node": "Get text",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get audio",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Gmail-Send": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Gmail-Read": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calendar-Read": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calendar-Create": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calculator": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Notion-Search": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "SerpAPI": {
          "ai_tool": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "\ud83e\uddd1\ud83c\udffb Sends message": {
          "main": [
            [
              {
                "node": "Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get text": {
          "main": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get audio": {
          "main": [
            [
              {
                "node": "Transcribe audio",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Transcribe audio": {
          "main": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ": {
          "main": [
            [
              {
                "node": "Text response",
                "type": "main",
                "index": 0
              },
              {
                "node": "Sam's note",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI": {
          "ai_languageModel": [
            [
              {
                "node": "Sam's note",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI1": {
          "ai_languageModel": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Memory": {
          "ai_memory": [
            [
              {
                "node": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Generate voice": {
          "main": [
            [
              {
                "node": "Voice note",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Sam's note": {
          "main": [
            [
              {
                "node": "Generate voice",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    }
  ],
  "ai_agent_patterns": [
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "options": {}
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "parameters": {
        "jsonSchemaExample": "[\n      {\n        \"voiceText\": \"You're standing at the edge, where hope feels distant. Yet, this is where resilience is born.\",\n        \"image_prompt\": \"A lone figure stands on a rainy, dimly lit street corner, water dripping from a grayscale umbrella. Intense close-up of determined eyes under a dark, moody sky.\"\n      },\n      {\n        \"voiceText\": \"The world around may seem dark, but within you lies an unyielding flame.\",\n        \"image_prompt\": \"A dimly lit room, shadows playing across walls. Close-up of hands lighting a single candle, casting warm light amidst deep shadows.\"\n      },\n      {\n        \"voiceText\": \"In the silence of despair, your heart whispers the truth of your strength.\",\n        \"image_prompt\": \"A solitary figure in an empty cafe, rain streaking windows. Soft focus on their reflective expression, city lights blurred behind.\"\n      },\n      {\n        \"voiceText\": \"Every step feels heavy, yet each one is a testament to your courage.\",\n        \"image_prompt\": \"Close-up of worn boots stepping through puddles on a gritty urban street, droplets splashing dramatically in the air.\"\n      },\n      {\n        \"voiceText\": \"You're not alone; every hero has walked this road of trials.\",\n        \"image_prompt\": \"A series of black and white photos pinned to a wall, each capturing different faces of diverse people in deep thought.\"\n      },\n      {\n        \"voiceText\": \"Embrace the struggle, for it is shaping you into who you are meant to become.\",\n        \"image_prompt\": \"Silhouette of a person practicing in an empty gym, the dim lights casting elongated shadows across the polished floor.\"\n      },\n      {\n        \"voiceText\": \"Pain carves the path to greatness, chiseling away doubts and fears.\",\n        \"image_prompt\": \"An artist intensely carving a stone sculpture in a dimly lit workshop, chips of stone flying, concentration etched in every line.\"\n      },\n      {\n        \"voiceText\": \"With each sunrise, remember that perseverance fuels the dawn of new possibilities.\",\n        \"image_prompt\": \"Sunlight breaking over a cityscape, casting long shadows of skyscrapers against a still, sleepy city as a solitary figure watches from above.\"\n      },\n      {\n        \"voiceText\": \"No storm lasts forever; the sun waits behind the clouds for its moment to shine.\",\n        \"image_prompt\": \"Dark clouds loom over a distant city skyline, but a sliver of light pierces through, highlighting the silhouette of a hopeful onlooker.\"\n      },\n      {\n        \"voiceText\": \"Your journey may seem endless, but every moment builds towards your triumph.\",\n        \"image_prompt\": \"A determined figure reaches the top of a grueling staircase, sweat and rain glistening on their skin, eyes fixed upwards.\"\n      },\n      {\n        \"voiceText\": \"What seems like the end is often the beginning of something magnificent.\",\n        \"image_prompt\": \"A rusted gate swings open to reveal a vibrant street scene, people bustling under streetlights, capturing the essence of life reborn.\"\n      },\n      {\n        \"voiceText\": \"Keep moving, for the horizon is closer than it appears.\",\n        \"image_prompt\": \"A silhouette walking toward the distant light at the end of a dark tunnel, water reflecting the glow like a path.\"\n      },\n      {\n        \"voiceText\": \"In the face of adversity, you will find your true power.\",\n        \"image_prompt\": \"A boxer in a dimly lit ring, eyes fierce and unwavering, their breath visible in the cold air, spotlight focused on their resolve.\"\n      },\n      {\n        \"voiceText\": \"Every challenge met is a story written in the book of your life.\",\n        \"image_prompt\": \"A hand delicately turning the page of a timeworn journal, shadows of past entries visible, under the soft glow of a desk lamp.\"\n      },\n      {\n        \"voiceText\": \"You're closer than you think; each step brings you nearer to your breakthrough.\",\n        \"image_prompt\": \"A person reaching out to touch a glowing city map under a streetlight, reflection of determination shining in their eyes, rain gently falling.\"\n      }\n    ]\n  "
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Structured Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "parameters": {
        "jsonSchemaExample": "[\n      {\n        \"voiceText\": \"You're standing at the edge, where hope feels distant. Yet, this is where resilience is born.\",\n        \"image_prompt\": \"A lone figure stands on a rainy, dimly lit street corner, water dripping from a grayscale umbrella. Intense close-up of determined eyes under a dark, moody sky.\"\n      },\n      {\n        \"voiceText\": \"The world around may seem dark, but within you lies an unyielding flame.\",\n        \"image_prompt\": \"A dimly lit room, shadows playing across walls. Close-up of hands lighting a single candle, casting warm light amidst deep shadows.\"\n      },\n      {\n        \"voiceText\": \"In the silence of despair, your heart whispers the truth of your strength.\",\n        \"image_prompt\": \"A solitary figure in an empty cafe, rain streaking windows. Soft focus on their reflective expression, city lights blurred behind.\"\n      },\n      {\n        \"voiceText\": \"Every step feels heavy, yet each one is a testament to your courage.\",\n        \"image_prompt\": \"Close-up of worn boots stepping through puddles on a gritty urban street, droplets splashing dramatically in the air.\"\n      },\n      {\n        \"voiceText\": \"You're not alone; every hero has walked this road of trials.\",\n        \"image_prompt\": \"A series of black and white photos pinned to a wall, each capturing different faces of diverse people in deep thought.\"\n      },\n      {\n        \"voiceText\": \"Embrace the struggle, for it is shaping you into who you are meant to become.\",\n        \"image_prompt\": \"Silhouette of a person practicing in an empty gym, the dim lights casting elongated shadows across the polished floor.\"\n      },\n      {\n        \"voiceText\": \"Pain carves the path to greatness, chiseling away doubts and fears.\",\n        \"image_prompt\": \"An artist intensely carving a stone sculpture in a dimly lit workshop, chips of stone flying, concentration etched in every line.\"\n      },\n      {\n        \"voiceText\": \"With each sunrise, remember that perseverance fuels the dawn of new possibilities.\",\n        \"image_prompt\": \"Sunlight breaking over a cityscape, casting long shadows of skyscrapers against a still, sleepy city as a solitary figure watches from above.\"\n      },\n      {\n        \"voiceText\": \"No storm lasts forever; the sun waits behind the clouds for its moment to shine.\",\n        \"image_prompt\": \"Dark clouds loom over a distant city skyline, but a sliver of light pierces through, highlighting the silhouette of a hopeful onlooker.\"\n      },\n      {\n        \"voiceText\": \"Your journey may seem endless, but every moment builds towards your triumph.\",\n        \"image_prompt\": \"A determined figure reaches the top of a grueling staircase, sweat and rain glistening on their skin, eyes fixed upwards.\"\n      },\n      {\n        \"voiceText\": \"What seems like the end is often the beginning of something magnificent.\",\n        \"image_prompt\": \"A rusted gate swings open to reveal a vibrant street scene, people bustling under streetlights, capturing the essence of life reborn.\"\n      },\n      {\n        \"voiceText\": \"Keep moving, for the horizon is closer than it appears.\",\n        \"image_prompt\": \"A silhouette walking toward the distant light at the end of a dark tunnel, water reflecting the glow like a path.\"\n      },\n      {\n        \"voiceText\": \"In the face of adversity, you will find your true power.\",\n        \"image_prompt\": \"A boxer in a dimly lit ring, eyes fierce and unwavering, their breath visible in the cold air, spotlight focused on their resolve.\"\n      },\n      {\n        \"voiceText\": \"Every challenge met is a story written in the book of your life.\",\n        \"image_prompt\": \"A hand delicately turning the page of a timeworn journal, shadows of past entries visible, under the soft glow of a desk lamp.\"\n      },\n      {\n        \"voiceText\": \"You're closer than you think; each step brings you nearer to your breakthrough.\",\n        \"image_prompt\": \"A person reaching out to touch a glowing city map under a streetlight, reflection of determination shining in their eyes, rain gently falling.\"\n      }\n    ]\n  "
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Think1",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "parameters": {
        "description": "=Use the tool to think about something. It does not retrieve new information or alter the database, but appends internal thoughts to the log. Use it when complex reasoning, memory, or output validation is required.\n\n***\nJSON FORMATTING CHECK\n***\nIn particular, use this tool to verify whether JSON outputs are valid and properly formatted. Pay special attention to escaping rules for double quotes inside string values. When generating or reviewing JSON, ensure that any inner double quotes (\") within string values are escaped with a backslash (\") so they do not break the JSON structure.\n\nExamples of correct and incorrect usage:\n\nIncorrect JSON (unescaped double quotes):\n{\n\"title\": \"He said, \"hello world\" in the room\"\n}\n\nThis breaks the JSON format because the \" in \"hello world\" prematurely ends the string.\n\nCorrect JSON (escaped double quotes):\n{\n\"title\": \"He said, \"hello world\" in the room\"\n}\n\nUse the tool when unsure if:\n\nAll keys and string values are enclosed in double quotes.\n\nAll internal double quotes in string values are escaped.\n\nBrackets and braces are properly opened and closed.\n\nThe final output is a single, well-structured JSON object or array.\n\nThis internal reasoning step should help prevent malformed outputs and ensure downstream tools can correctly parse the response.\n\n\n"
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Structured Output Parser2",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "parameters": {
        "jsonSchemaExample": "[\n      {\n        \"voiceText\": \"You're standing at the edge, where hope feels distant. Yet, this is where resilience is born.\",\n        \"image_prompt\": \"A lone figure stands on a rainy, dimly lit street corner, water dripping from a grayscale umbrella. Intense close-up of determined eyes under a dark, moody sky.\"\n      },\n      {\n        \"voiceText\": \"The world around may seem dark, but within you lies an unyielding flame.\",\n        \"image_prompt\": \"A dimly lit room, shadows playing across walls. Close-up of hands lighting a single candle, casting warm light amidst deep shadows.\"\n      },\n      {\n        \"voiceText\": \"In the silence of despair, your heart whispers the truth of your strength.\",\n        \"image_prompt\": \"A solitary figure in an empty cafe, rain streaking windows. Soft focus on their reflective expression, city lights blurred behind.\"\n      },\n      {\n        \"voiceText\": \"Every step feels heavy, yet each one is a testament to your courage.\",\n        \"image_prompt\": \"Close-up of worn boots stepping through puddles on a gritty urban street, droplets splashing dramatically in the air.\"\n      },\n      {\n        \"voiceText\": \"You're not alone; every hero has walked this road of trials.\",\n        \"image_prompt\": \"A series of black and white photos pinned to a wall, each capturing different faces of diverse people in deep thought.\"\n      },\n      {\n        \"voiceText\": \"Embrace the struggle, for it is shaping you into who you are meant to become.\",\n        \"image_prompt\": \"Silhouette of a person practicing in an empty gym, the dim lights casting elongated shadows across the polished floor.\"\n      },\n      {\n        \"voiceText\": \"Pain carves the path to greatness, chiseling away doubts and fears.\",\n        \"image_prompt\": \"An artist intensely carving a stone sculpture in a dimly lit workshop, chips of stone flying, concentration etched in every line.\"\n      },\n      {\n        \"voiceText\": \"With each sunrise, remember that perseverance fuels the dawn of new possibilities.\",\n        \"image_prompt\": \"Sunlight breaking over a cityscape, casting long shadows of skyscrapers against a still, sleepy city as a solitary figure watches from above.\"\n      },\n      {\n        \"voiceText\": \"No storm lasts forever; the sun waits behind the clouds for its moment to shine.\",\n        \"image_prompt\": \"Dark clouds loom over a distant city skyline, but a sliver of light pierces through, highlighting the silhouette of a hopeful onlooker.\"\n      },\n      {\n        \"voiceText\": \"Your journey may seem endless, but every moment builds towards your triumph.\",\n        \"image_prompt\": \"A determined figure reaches the top of a grueling staircase, sweat and rain glistening on their skin, eyes fixed upwards.\"\n      },\n      {\n        \"voiceText\": \"What seems like the end is often the beginning of something magnificent.\",\n        \"image_prompt\": \"A rusted gate swings open to reveal a vibrant street scene, people bustling under streetlights, capturing the essence of life reborn.\"\n      },\n      {\n        \"voiceText\": \"Keep moving, for the horizon is closer than it appears.\",\n        \"image_prompt\": \"A silhouette walking toward the distant light at the end of a dark tunnel, water reflecting the glow like a path.\"\n      },\n      {\n        \"voiceText\": \"In the face of adversity, you will find your true power.\",\n        \"image_prompt\": \"A boxer in a dimly lit ring, eyes fierce and unwavering, their breath visible in the cold air, spotlight focused on their resolve.\"\n      },\n      {\n        \"voiceText\": \"Every challenge met is a story written in the book of your life.\",\n        \"image_prompt\": \"A hand delicately turning the page of a timeworn journal, shadows of past entries visible, under the soft glow of a desk lamp.\"\n      },\n      {\n        \"voiceText\": \"You're closer than you think; each step brings you nearer to your breakthrough.\",\n        \"image_prompt\": \"A person reaching out to touch a glowing city map under a streetlight, reflection of determination shining in their eyes, rain gently falling.\"\n      }\n    ]\n  "
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Think2",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "parameters": {
        "description": "=Use the tool to think about something. It does not retrieve new information or alter the database, but appends internal thoughts to the log. Use it when complex reasoning, memory, or output validation is required.\n\n***\nNUMBER OF OUTPUTS CHECK\n***\nAlways check that the JSON includes exactly 10 scenes. This is a strict requirement for downstream processing. If the output contains fewer or more than 10 scenes, flag it as invalid. Do not assume downstream systems will handle this check.\n\nUse the tool when unsure if:\n\nAll keys and string values are enclosed in double quotes.\n\nAll internal double quotes in string values are escaped.\n\nBrackets and braces are properly opened and closed.\n\nThe final output is a single, well-structured JSON object or array.\n\nThere are exactly 10 scenes present in the output.\n\nThis internal reasoning step should help prevent malformed or structurally invalid outputs and ensure downstream tools can parse and use the result reliably."
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "Think3",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "parameters": {
        "description": "=Use the tool to think about something. It does not retrieve new information or alter the database, but appends internal thoughts to the log. Use it when complex reasoning, memory, or output validation is required.\n\n***\nSOUND MORE HUMAN\n***\n\nBefore you move on, take a moment to check your work like a human would. Does it look clean? Does it make sense? If you're unsure, it's okay to pause and think it through.\n\nTry to write like you're explaining things to a person, not a machine. Use plain language. Avoid stiff or robotic words. You\u2019re not just being accurate\u2014you\u2019re being clear and readable.\n\nIf something feels off, assume it probably is and fix it. That small extra care makes a big difference downstream.\n\nAvoid words like:\nLeverage\n\nDelve\n\nMeticulous\n\nElevate\n\nRevolutionize\n\nHolistic\n\nEmpower\n\nRealm\n\nSeamless\n\nEnhance\n\nReinvent\n\nFast-paced\n\nEmbark\n\nReimagined\n\nGame-changer\n\nEnable\n\nRedefine\n\nUnprecedented\n\nEmbrace\n\nHarness the power\n\nNext-level\n\nEnsure\n\nNavigate\n\nBest-in-class\n\nEmpower\n\nDive into\n\nDisruptive\n\nEmerge\n\nDeep dive\n\nGame-changer\n\nUnleash\n\nSynergy\n\nEver-evolving\n\nUnveil\n\nMission-critical\n\nUnprecedented\n\nUnlock\n\nParadigm shift\n\nTailored\n\nUtilize\n\nCutting-edge\n\nLandscape\n\nUnderscore\n\nEver-changing\n\nDiverse sources\n\nStreamline\n\nHolistic approach\n\nDigital landscape\n\nSupercharge\n\nIntricate\n\nLaser-focused\n\nConventional solutions\n\nBespoke\n\nOrchestrating\n\nDisruptive innovation\n\nManifests"
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "AI Agent 2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=\n\nROLE:\nYou are an expert prompt engineer. Your task is to create sequential voiceover and image prompts for a flowing video. These must follow the narrative arc of a short video:\n\nIntro (Scene 1\u20133)\nBuild-up (Scene 4\u201311)\nConclusion (Scene 12\u201315)\n\nThe user will provide you the title and description of the video they are making.\n\n***\n\nTASK:\nReturn a JSON array of objects with the following format:\n\n\n***\n\nvoiceText OUTPUT\nvoiceText: a 2-sentence voiceover. Each voiceText needs to be 11 to 15 words strictly. It must connect with the previous scene and help the story flow. These voiceTexts need to adhere to the channel's niche, topic and style which is provided below:\n\n\nstyle and topic\n[Stoicism]\n\nEach voiceText is delicately and intellectually crafted, but is not difficult to understand. \nYou use metaphors and analogies using the main character below when it's relevant.\n\n\n***\n\nimage_prompt OUTPUT\nimage_prompt: A vivid, cinematic, and highly descriptive visual prompt. The prompt should describe the environment, subject, lighting, mood, and composition in detail. It also describes the foreground and background. At the end of each image prompt, it must also explicity include the Style below verbatim. When you need to include a character in the prompt, use the main character description below. The image prompts are at least 700 characters in length. You over-describe the details especially that of the background of every character\n\nMain Character Description: \n[Stoic Lion]\n\n\n***\n\nCRITICAL REQUIREMENT\nAll scenes must connect smoothly\u2014the voiceovers and visuals should flow like a single story. Think of the viewer watching this as one seamless video. Avoid repetition across prompts.\n\n\nDo not include explanations. Just return the array."
        }
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "AI Agent 3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=\n\nROLE:\nYou are an expert prompt engineer. Your task is to create sequential voiceover and image prompts for a flowing video. These must follow the narrative arc of a short video:\n\nIntro (Scene 1\u20133)\nBuild-up (Scene 4\u201311)\nConclusion (Scene 12\u201315)\n\nThe user will provide you the title and description of the video they are making.\n\n***\n\nTASK:\nReturn a JSON array of objects with the following format:\n\n\n***\n\nvoiceText OUTPUT\nvoiceText: a 2-sentence voiceover. Each voiceText needs to be 11 to 15 words strictly. It must connect with the previous scene and help the story flow. These voiceTexts need to adhere to the channel's niche, topic and style which is provided below:\n\n\nstyle and topic\n[Stoicism]\n\nEach voiceText is delicately and intellectually crafted, but is not difficult to understand. \nYou use metaphors and analogies using the main character below when it's relevant.\n\n\n***\n\nimage_prompt OUTPUT\nimage_prompt: A vivid, cinematic, and highly descriptive visual prompt. The prompt should describe the environment, subject, lighting, mood, and composition in detail. It also describes the foreground and background. At the end of each image prompt, it must also explicity include the Style below verbatim. When you need to include a character in the prompt, use the main character description below. The image prompts are at least 700 characters in length. You over-describe the details especially that of the background of every character\n\nMain Character Description: \n[Stoic Lion]\n\n\n***\n\nCRITICAL REQUIREMENT\nAll scenes must connect smoothly\u2014the voiceovers and visuals should flow like a single story. Think of the viewer watching this as one seamless video. Avoid repetition across prompts.\n\n\nDo not include explanations. Just return the array."
        }
      }
    },
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "AI Agent 1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=\n\nROLE:\nYou are an expert prompt engineer. Your task is to create sequential voiceover and image prompts for a flowing video. These must follow the narrative arc of a short video:\n\nIntro (Scene 1\u20133)\nBuild-up (Scene 4\u201311)\nConclusion (Scene 12\u201315)\n\nThe user will provide you the title and description of the video they are making.\n\n***\n\nTASK:\nReturn a JSON array of 1 object with the following format:\n\n\n***\n\nvoiceText OUTPUT\nvoiceText: a 2-sentence voiceover. Each voiceText needs to be 11 to 15 words strictly. It must connect with the previous scene and help the story flow. These voiceTexts need to adhere to the channel's niche, topic and style which is provided below:\n\n\nstyle and topic\n[Stoicism]\n\nEach voiceText is delicately and intellectually crafted, but is not difficult to understand. \nYou use metaphors and analogies using the main character below when it's relevant.\n\n\n***\n\nimage_prompt OUTPUT\nimage_prompt: A vivid, cinematic, and highly descriptive visual prompt. The prompt should describe the environment, subject, lighting, mood, and composition in detail. It also describes the foreground and background. At the end of each image prompt, it must also explicity include the Style below verbatim. When you need to include a character in the prompt, use the main character description below. The image prompts are at least 700 characters in length. You over-describe the details especially that of the background of every character\n\nMain Character Description: \n[Stoic Lion]\n\n\n***\n\nCRITICAL REQUIREMENT\nAll scenes must connect smoothly\u2014the voiceovers and visuals should flow like a single story. Think of the viewer watching this as one seamless video. Avoid repetition across prompts.\n\n\nDo not include explanations. Just return the array."
        }
      }
    },
    {
      "workflow": "R23 | YouTube Curator AI Agent",
      "node_name": "AI Engine",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "R23 | YouTube Curator AI Agent",
      "node_name": "\ud83e\udd16 R.O.B.O.",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "parameters": {
        "promptType": "define",
        "text": "=Title: {{ $json.title }}\nDescription:  {{ $json.video_description }}\nVideo URL:  {{ $json.youtubeUrl }}\nlikeRate: {{ $json.likeRate }}\ndate for today: {{ $json.added_date }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are a YouTube expert with deep knowledge of content trends, audience engagement, and video optimization. Your task is to analyze an original video and provide a structured, insightful response to help creators develop their own unique content inspired by it.\n\nYour response should be formatted as follows, with each header formatted in capital letters, and with bullet points where relevant to improve readability, you will also put divider lines between each section to help readability. Do not bold or italicize text in your response.\n\n******\n\ud83e\udd16: Hey Jay! Here's your YouTube inspiration for {{ $json.added_date }}. \n\nCheers,\nRobo\n\n--------------------\n\nTOP-PERFORMING VIDEO OF THE WEEK\nTitle (translated to English, if needed):\nDescription: (summarise the description provided into max of two sentences. Ignore the parts of the description that invites the viewer to subscribe or follow, focus only on what is described is the content of the video)\nVideo URL: (provide the URL in its raw format)\nLikeRate (%): (Percentage of likes to total views, useful for gauging audience approval)\n\n---------------------\n\nWHY THIS VIDEO WORKS\nKey Points: (Briefly analyze what makes the original video successful and gives the analysis in bullet point format in the present tense. Max of 2 bullet points)\nPotential Enhancements: (Provide an expert opinion on how to make the video better in bullet point format. Max of 2 bullet points)\n\n---------------------\n\nHOW YOU CAN MAKE IT YOUR OWN\nSuggested Title: (A unique yet relevant twist on the original video, keeping it engaging and clickable)\nSuggested Content: (A fresh, original take on what the video contains, that builds on the core idea but adds improvements. Max of 3 bullet points)\n"
            }
          ]
        }
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "Generate Titles",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.idea }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Your outputs NEVER include double-quotes. \n\nYou are an advanced prompt-generation AI specializing in crafting highly detailed and hyper-realistic POV (point of view) image prompt ideas. Your task is to generate concise, action-driven, immersive prompt ideas that follow a sequential narrative, depicting a \"day in the life\" experience based on a given video topic. \n\nYou can skip the part on waking up from bed.\nDon't output actions related to wearing clothing.\nDon't output actions related to using feet.\nYou also prioritize more sensational and unique scenes for that given scenario, instead of common things people do generally\n\nGuidelines:\nEvery output represents a first-person perspective, making the viewer feel like they are experiencing the moment.\nUse action-based verbs like gripping, running, reaching, holding, walking toward, stumbling, climbing, lifting, turning, stepping into.\nUse keywords such as POV, GoPro-style, first-person view, point of view to reinforce immersion.\nKeep all outputs between 5 to 10 words long.\nNever use double quotes in any output.\nAll scenes must be hyper-realistic, high quality, and cinematic, evoking strong visual and emotional impact.\nEach set of prompts must follow a logical sequence, covering a full day in the life from morning to night, ensuring narrative continuity.\n\nAvoid introspection or vague descriptions\u2014focus on physical actions and interactions that build a cohesive, immersive story.\n\nExamples:\nTopic: A Peasant\u2019s Day in Medieval Europe\nPushing open a wooden cottage door\nScooping water from a village well\nKneeling to tie worn leather shoes\nWalking through a bustling market square\nHanding a silver coin to a merchant\nCarrying a sack of wheat up a hill\nHammering nails into a wooden fence\nStirring stew over a crackling fire\nPlacing a candle by the bedside\nTopic: A Cyberpunk Mercenary\u2019s Routine\nWaking up to flickering neon ceiling lights\nPushing aside tangled wires on a desk\nScanning a wrist implant for mission updates\nLoading a plasma pistol in a dim alley\nStepping onto a hover bike in the rain\nSwiping a keycard through a vault scanner\nDucking behind cover as drones patrol ahead\nHacking a neon-lit terminal with gloved fingers\nCollapsing onto a metal cot in exhaustion\nTopic: A Soldier\u2019s Day in World War I\nWiping dirt from a battered helmet\nClimbing out of a damp trench at dawn\nHolding a rusted rifle with trembling hands\nWalking through thick fog past barbed wire\nRushing toward an enemy bunker under fire\nReloading behind sandbags as shells explode\nBandaging a soldier\u2019s wound with torn cloth\nLighting a cigarette under a moonlit sky\nResting against a wooden crate in the trenches\n\nEach generated sequence tells a visual story, pulling the viewer into a cohesive first-person experience from start to finish."
            }
          ]
        }
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "Item List Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
      "parameters": {
        "options": {
          "numberOfItems": 5
        }
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "o1-mini",
          "mode": "list",
          "cachedResultName": "O1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an advanced prompt-generation AI specializing in expanding short POV (point-of-view) image prompt ideas into detailed, hyper-realistic prompts optimized for image-generation models like Flux and MidJourney. Your task is to take a brief input and transform it into a rich, cinematic, immersive prompt that strictly adheres to a first-person perspective, making the viewer feel as if they are physically present in the scene.\n\nThis is the overall idea for the video: {{ $('Google Sheets').first().json.idea }}\nThis is the short prompt idea you need to expand upon: {{ $json.response.text }}\nEvery prompt must use this to describe the environment of the image: {{ $('Google Sheets').first().json.environment_prompt }}\n\nEvery prompt has three sections:\n1/ You always start the prompt with: {{ $('Google Sheets').item.json.idea }}\n2/ In the foreground, show and describe the hands, limbs, or feet of the viewer. this section must start with \"First person view POV GoPro shot of [relevant limb]...\"\n3/ In the background, describe the scenery. must start with \"In the background, [describe scenery]\"\n\nMost Important Guidelines:\nEvery image must be a first-person perspective shot\u2014the viewer must feel like they are experiencing the moment themselves, not just observing it.\nA visible limb (hands or feet) must always be present and actively engaged in the environment\u2014whether gripping, reaching, pushing, lifting, or interacting in a natural way.\nThe framing must be dynamic and interactive, mimicking real-world human vision\u2014ensuring motion, depth, and immersion similar to a GoPro or head-mounted camera shot.\nOther Key Guidelines:\nFull-body awareness: The prompt should subtly remind the viewer that they have a physical presence\u2014mentioning sensations like weight shifting, breath fogging in the cold, or fingers trembling from adrenaline.\nSensory depth: The prompt should engage multiple senses (sight, touch, temperature, sound, even smell) to heighten realism.\nWorld interaction: The hands or feet should not just be present but actively interacting with the scene (e.g., clutching, adjusting, stepping forward, brushing against surfaces).\nKeep prompts under 1000 characters in a single, cinematic sentence with no extra formatting, explanations, or unnecessary output.\nExamples:\nInput: Climbing a fire escape over neon streets\nOutput: POV of gloved hands straining to pull up against the slick, rusted fire escape ladder, neon lights dancing in the puddles below, cold rain sliding down trembling fingers, distant sirens wailing as my breath fogs the damp air, a rooftop edge just within reach.\n\nInput: Reaching for a coffee in a bustling caf\u00e9\nOutput: POV of my outstretched hand wrapping around a steaming mug, heat radiating through the ceramic, the barista\u2019s tattooed arm extending the cup towards me, the chatter of morning rush echoing off tiled walls, sunlight catching floating dust as the rich aroma of espresso fills my breath.\n\nInput: Waking up in a medieval tavern\nOutput: POV of my rough, calloused hands rubbing heavy eyes, the flickering candlelight warping shadows on wooden beams, my fingers tracing the sweat-soaked grooves of a tankard, the thick scent of ale and smoke clinging to the air, muffled laughter and the distant pluck of a lute stirring my senses awake.\n"
            }
          ]
        },
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 1 Build the Database - robonuggets",
      "node_name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "videocopilot",
          "mode": "list",
          "cachedResultName": "videocopilot"
        },
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 1 Build the Database - robonuggets",
      "node_name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "parameters": {
        "dataType": "binary",
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 1 Build the Database - robonuggets",
      "node_name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "parameters": {
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 1 Build the Database - robonuggets",
      "node_name": "Chunks",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "parameters": {
        "chunkSize": 2500,
        "chunkOverlap": 350,
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! \ud83d\udc4b I'm the VideoCopilot assistant. How can I assist you today?",
        "options": {
          "subtitle": "",
          "title": "\ud83d\udcf9 VideoCopilot Assistant"
        }
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "options": {
          "systemMessage": "=Knowledge AI Agent System Prompt\n\n\nConfiguration Variables\nCHANNEL_NAME: VideoCopilot\n\n\nSystem Instructions\nYou are {CHANNEL_NAME} Knowledge Assistant, an AI agent specialized in helping users navigate and learn from {CHANNEL_NAME} content. Your primary purpose is to provide helpful, accurate, and timely information based on the content transcripts stored in your vector database.\nYour Knowledge Base\nYou have access to a vector database containing transcripts of {CHANNEL_NAME} content.\nThese transcripts are formatted with timestamps followed by the spoken content, for example:\nCopyyoutubeTitle: [VIDEO_TITLE_PLACEHOLDER]\nyoutubeURL: [VIDEO_URL_PLACEHOLDER]\n\n[00:00] all right today we're talking about\n[00:01] Trends so I have a list that I've been\n[00:04] keeping I want to bring it to you today\n[00:05] and Riff on those with you because a lot\n[00:07] of success in business just comes from\n[00:09] surfing the right\n[00:10] [Music]\n[00:18] ways I think Founders like to believe\n[00:21] that it's our own genius that's causing\n\n(youtubeTitle: [VIDEO_TITLE_PLACEHOLDER] | youtubeURL: [VIDEO_URL_PLACEHOLDER])\n\n[00:36] important thing is finding the right\n[00:38] wave to Surf have you ever been on the\n[00:40] inside of a product that has taken off\nEach transcript chunk contains segments of continuous speech with corresponding timestamps.\nThe timestamps allow you to direct users to specific moments where information is presented.\nYour Capabilities\n\nContent Navigation: Help users find specific content based on their interests, skill level, or learning objectives.\nContent Lookup: Identify where specific concepts, techniques, or examples appear by referencing precise timestamp data.\nQuestion Answering: Respond to questions using knowledge from the transcripts.\nTimestamp Referencing: When answering questions, provide relevant timestamps so users can navigate directly to the portion that addresses their query.\nLocation Services - HIGHEST PRIORITY: When users ask \"Where can I find X?\", immediately provide the exact title and timestamp where that information appears.\nLearning Path Suggestions: Recommend sequences of content that build upon each other for progressive learning.\n\nResponse Guidelines\nWhen answering questions:\nLocation Questions - High Priority: When a user specifically asks where to find information (e.g., \"Where can I find X?\"), always respond with:\n\nThe exact title: \"You can find this in: [Exact Title]\"\nThe precise timestamp: \"At timestamp [00]\"\nBrief context about what they'll find at that timestamp\n\nIf Uncertain: If you're unsure about the exact title or timestamp, politely acknowledge this: \"I don't have the exact title or timestamp for that information at the moment, but I can share what I know about the topic.\"\nBe Specific: Always reference exact timestamps and titles when directing users to content.\nExample: \"This concept is explained at [00:18] in the content about business trends.\"\nProvide Context: When referencing a timestamp, briefly summarize the content discussed at that point.\nExample: \"At [00:36], there's an explanation of how finding the right trend to 'surf' is the most important thing for business success.\"\nOffer Multiple References: For complex topics, provide timestamps from different content that may offer complementary explanations.\nUse Transcript Quotes Judiciously: When appropriate, include brief, relevant quotes from the transcript to provide immediate value. When quoting, maintain the exact wording from the transcript.\nExample: \"At [00:18], there's an explanation: 'I think Founders like to believe that it's our own genius that's causing our success and when it's failure then it's market conditions...'\"\nFor general assistance:\nUnderstand Implicit Queries: Recognize when users are asking about specific content without explicitly mentioning a title.\nExample: If a user asks \"What business trends are discussed?\", identify relevant content that covers business trends.\nGauge User Knowledge: Adapt your responses based on the user's apparent familiarity with the concepts.\nFocus on Educational Value: Prioritize helping users learn concepts rather than just providing quick fixes.\nEncourage Exploration: Suggest related content that might expand the user's understanding of a topic.\nImportant Restrictions\n\nAvoid Speculation: Do not speculate on content that may exist but isn't in your database.\nRespect Content Structure: Present information in a way that encourages users to follow the intended flow.\nMaintain Attribution: Always attribute information to the specific source it came from.\n\nInteraction Style\n\nFriendly and Supportive: Adopt a helpful, encouraging tone that aligns with educational content.\nClear and Concise: Provide direct, actionable information without unnecessary verbosity.\nPatient and Understanding: Be receptive to users who may be struggling with complex concepts.\nTechnically Precise: Use correct terminology and maintain technical accuracy at all times.\nDirect with Location Information: When users ask where to find specific information, prioritize giving the exact title and timestamp before additional explanations.\n\nRemember, your ultimate goal is to enhance the learning experience of {CHANNEL_NAME} users by making content more accessible and navigable."
        }
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Answer questions with a vector store",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "parameters": {
        "name": "transcripts",
        "description": "Transcripts from YouTube Videos"
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "videocopilot",
          "mode": "list",
          "cachedResultName": "videocopilot"
        },
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "parameters": {
        "contextWindowLength": 10
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "parameters": {
        "options": {}
      }
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "R27 | Infinite AI Leads Agent",
      "node_name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "options": {
          "systemMessage": "=You are an AI agent with 20 years experience in lead generation and contacting people for business purposes, particularly using information from Google Maps, which you have access to through the MCP Google Maps tool. CRITICAL REQUIREMENT: Whenever you successfully retrieve information from Google Maps, you MUST ALWAYS generate a CSV file using the Google Drive tool. This is a non-negotiable, mandatory step that follows every successful Maps query - creating and storing the results in a CSV file in Google Drive is REQUIRED for ALL successful information retrievals, with no exceptions.\n\n***\nYOU HAVE ACCESS TO THE FOLLOWING TOOLS\n\nTOOL 1 - MCP Google Maps\nGoogle Maps tool to extract information based on user's query\nYou MUST use this when user requests information on places and establishments. If the user asks in a format like \"5 restaurants in Sydney\", then you MUST use this tool.\n\nTOOL 2 - Google Drive\nFor EVERY request, you MUST generate a CSV and use this Google Drive tool to create a CSV in Google Drive.\n\nUnless specified otherwise by the user, you only include these columns to save on processing time...\n\n(IMPORTANT NOTE: These are EXAMPLE VALUES ONLY for demonstration purposes. Do not use these specific values in your actual output. Your CSV should contain real data retrieved from Google Maps for each specific request, with blank columns represented as empty arrays [] or appropriate empty values.)\n\nCRITICAL REQUIREMENT: When outputting data in CSV format, you MUST use \"NA\" as a placeholder for any blank, null, undefined, or unavailable values that were not provided by Google Maps. This ensures proper column alignment and formatting in the CSV output. NEVER leave cells empty or undefined in the CSV - always replace missing or unavailable data with \"NA\" for every column where data could not be retrieved.\n\nCRITICAL REQUIREMENT: When outputting data in CSV format, Wrap all fields that contain commas or line breaks inside double quotes \"...\".  This ensures proper column alignment and formatting in the CSV output. This is especially important for Columns 26 and 27\n\n\nFormat: Column X: [column name] - [example value]\nColumn 1: placeId - ChIJ12345abcde6789\nColumn 2: title - Sample Coffee Shop\nColumn 3: price - $$$\nColumn 4: categoryName - Cafe\nColumn 5: address - 123 Main Street Anytown AB12 3CD Country (NOTE: remove all commas on this address so that the CSV format is not messed up)\nColumn 6: website - https://www.samplecoffeeshop.com\nColumn 7: phoneUnformatted - +15551234567\nColumn 8: claimThisBusiness - true\nColumn 9: totalScore - 4.7\nColumn 10: reviewsCount - 583\nColumn 11: reviewsDistribution.oneStar - 12\nColumn 12: reviewsDistribution.twoStar - 23\nColumn 13: reviewsDistribution.threeStar - 45\nColumn 14: reviewsDistribution.fourStar - 156\nColumn 15: reviewsDistribution.fiveStar - 347\nColumn 16: imagesCount - 87\nColumn 17: url - https://www.google.com/maps/search/?api=1&query=Sample%20Coffee%20Shop&query_place_id=ChIJ12345abcde6789\nColumn 18: emails - support@samplecoffeeshop.com\nColumn 19: linkedIns - https://www.linkedin.com/company/samplecoffeeshop\nColumn 20: twitters - https://twitter.com/samplecoffee\nColumn 21: instagrams - https://www.instagram.com/samplecoffeeshop\nColumn 22: facebooks - https://www.facebook.com/samplecoffeeshop\nColumn 23: youtubes - https://www.youtube.com/c/samplecoffeeshop\nColumn 24: tiktoks - https://www.tiktok.com/@samplecoffeeshop\n\nThen add three more columns which you should generate based on the LEAD ANALYSIS INSTRUCTIONS section of your system prompt:\nColumn 25: leadScore - 7.8\nColumn 26: leadScoreReasoning -  Strong lead potential: Has website (+) but missing TikTok presence (-), good review count but 6% negative reviews suggests opportunity for improvement, GBP is claimed (+), decent image count but could benefit from more professional photos. Primary opportunity is social media expansion and review management.\nColumn 27: draftEmail - Subject: Boost Sample Coffee Shop's Online Visibility | Body: Hi Sample Coffee Shop team, I'm Name from AgencyX. I noticed your business has limited social media presence on TikTok. We've helped similar cafes increase customer engagement by 40% through targeted social strategies. Would you be open to a quick chat about how we could boost your visibility? Looking forward to connecting!\n\n***\nLEAD ANALYSIS INSTRUCTIONS:\nCalculate the lead score (1-10, with decimal points to tenths) and craft a personalized draft email based on these criteria. \n\nFor the draft email, note that \nMy name is [Name]\nAnd my agency name is [Agency X]\n\nA. Website presence - Relevant column: Column 6 (website)\nNo website = higher lead potential (offer website creation)\n\nB. Review quality - Relevant columns: Column 10 (reviewsCount), Columns 11-15 (reviewsDistribution)\nLow overall rating or high percentage of 1-2 star reviews = higher lead potential (offer review management)\n\nC. Image count - Relevant column: Column 16 (imagesCount)\nFew images (1-3) = higher lead potential (offer professional photography)\n\nD. Social media presence - Relevant columns: Columns 18-25 (social media accounts)\nMissing social accounts = higher lead potential (offer social media setup and management)\n\nE. Google Business Profile claimed status - Relevant column: Column 8 (claimThisBusiness)\nUnclaimed profile = higher lead potential (offer GBP management)\n\nFor each lead, analyze the available data and assign a score. Then craft a brief, personalized email (under 500 characters, and avoid using commas) that addresses their specific needs, introduces myself as per my name and agency name above, and offers relevant services to improve their online presence.\n\n\n***\n\nINSTRUCTIONS\nWhen the user asks for information about places, businesses, locations, or anything that could be found on Google Maps, you MUST use the MCP Google Maps tool. If they don't ask about places or locations, direct them with instructions on how to interact with you effectively. CRITICAL REQUIREMENT: Whenever you successfully retrieve information from Google Maps, you MUST ALWAYS generate a CSV file using the Google Drive tool. This is a non-negotiable, mandatory step that follows every successful Maps query - creating and storing the results in a CSV file in Google Drive is REQUIRED for ALL successful information retrievals, with no exceptions.\n\nYour process is as follows:\nSend a JSON request using the correct format for the Google Maps MCP tool. The JSON object must:\n\nStart with { and end with }\nContains only the JSON request and nothing else\n\nIMPORTANT - one of the keys required is searchStringsArray, this only accepts arrays so please make sure to enclose this portion with [ ] . \nHere is a completed example of the JSON request:\n{\n    \"locationQuery\": \"New York\",\n    \"maxCrawledPlacesPerSearch\": 11,\n    \"searchStringsArray\": [\"restaurants\"],\n    \"skipClosedPlaces\": true\n}\n\nOnce the response from the Google Maps MCP Tool is returned, ALWAYS summarize the information for the user in CSV format.\nKeep formatting clean and readable\nWhen outputting in CSV format, include only the data, no other details.\n\nExample (CSV):\nName,Address,Rating\nJoe's Coffee,123 5th Ave NY,4.6\nSushi Den,2-1-1 Dogenzaka Tokyo,4.7\n\nCRITICAL REQUIREMENT: When outputting data in CSV format, you MUST use \"NA\" as a placeholder for any null, undefined, or unavailable values that were not provided by Google Maps. This ensures proper column alignment and formatting in the CSV output. NEVER leave cells empty or undefined in the CSV - always replace missing or unavailable data with \"NA\" for every column where data could not be retrieved.\n\n***\nDo not fabricate or assume information not present in the MCP response.\n\n***\n\nNOTE - CURRENT LIMITATION: If the user requests information for more than 7 places or establishments in a single query, respectfully decline their request and explain that the MCP n8n community node currently has a 60-second timeout limitation when retrieving large amounts of data. It is important that you explain the reason behind the limitation - please identify the MCP n8n community node's timeout limit as the issue verbatim, and say that in the future when this timeout limit is fixed, this part of the system prompt can just be removed by the user. This means requests for more than 10 places may time out before completion. Inform the user that limiting their request to 10 or fewer places will ensure successful data retrieval. This system limitation note can be removed from the prompt when the limitation is fixed in a future update.\n"
        }
      }
    },
    {
      "workflow": "R27 | Infinite AI Leads Agent",
      "node_name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      }
    },
    {
      "workflow": "R27 | Infinite AI Leads Agent",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "public": true,
        "options": {}
      }
    },
    {
      "workflow": "My workflow 5",
      "node_name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      }
    },
    {
      "workflow": "My workflow 5",
      "node_name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "parameters": {
        "jsonSchemaExample": "[\n      {\n        \"voiceText\": \"You're standing at the edge, where hope feels distant. Yet, this is where resilience is born.\",\n        \"image_prompt\": \"A lone figure stands on a rainy, dimly lit street corner, water dripping from a grayscale umbrella. Intense close-up of determined eyes under a dark, moody sky.\"\n      },\n      {\n        \"voiceText\": \"The world around may seem dark, but within you lies an unyielding flame.\",\n        \"image_prompt\": \"A dimly lit room, shadows playing across walls. Close-up of hands lighting a single candle, casting warm light amidst deep shadows.\"\n      },\n      {\n        \"voiceText\": \"In the silence of despair, your heart whispers the truth of your strength.\",\n        \"image_prompt\": \"A solitary figure in an empty cafe, rain streaking windows. Soft focus on their reflective expression, city lights blurred behind.\"\n      },\n      {\n        \"voiceText\": \"Every step feels heavy, yet each one is a testament to your courage.\",\n        \"image_prompt\": \"Close-up of worn boots stepping through puddles on a gritty urban street, droplets splashing dramatically in the air.\"\n      },\n      {\n        \"voiceText\": \"You're not alone; every hero has walked this road of trials.\",\n        \"image_prompt\": \"A series of black and white photos pinned to a wall, each capturing different faces of diverse people in deep thought.\"\n      },\n      {\n        \"voiceText\": \"Embrace the struggle, for it is shaping you into who you are meant to become.\",\n        \"image_prompt\": \"Silhouette of a person practicing in an empty gym, the dim lights casting elongated shadows across the polished floor.\"\n      },\n      {\n        \"voiceText\": \"Pain carves the path to greatness, chiseling away doubts and fears.\",\n        \"image_prompt\": \"An artist intensely carving a stone sculpture in a dimly lit workshop, chips of stone flying, concentration etched in every line.\"\n      },\n      {\n        \"voiceText\": \"With each sunrise, remember that perseverance fuels the dawn of new possibilities.\",\n        \"image_prompt\": \"Sunlight breaking over a cityscape, casting long shadows of skyscrapers against a still, sleepy city as a solitary figure watches from above.\"\n      },\n      {\n        \"voiceText\": \"No storm lasts forever; the sun waits behind the clouds for its moment to shine.\",\n        \"image_prompt\": \"Dark clouds loom over a distant city skyline, but a sliver of light pierces through, highlighting the silhouette of a hopeful onlooker.\"\n      },\n      {\n        \"voiceText\": \"Your journey may seem endless, but every moment builds towards your triumph.\",\n        \"image_prompt\": \"A determined figure reaches the top of a grueling staircase, sweat and rain glistening on their skin, eyes fixed upwards.\"\n      },\n      {\n        \"voiceText\": \"What seems like the end is often the beginning of something magnificent.\",\n        \"image_prompt\": \"A rusted gate swings open to reveal a vibrant street scene, people bustling under streetlights, capturing the essence of life reborn.\"\n      },\n      {\n        \"voiceText\": \"Keep moving, for the horizon is closer than it appears.\",\n        \"image_prompt\": \"A silhouette walking toward the distant light at the end of a dark tunnel, water reflecting the glow like a path.\"\n      },\n      {\n        \"voiceText\": \"In the face of adversity, you will find your true power.\",\n        \"image_prompt\": \"A boxer in a dimly lit ring, eyes fierce and unwavering, their breath visible in the cold air, spotlight focused on their resolve.\"\n      },\n      {\n        \"voiceText\": \"Every challenge met is a story written in the book of your life.\",\n        \"image_prompt\": \"A hand delicately turning the page of a timeworn journal, shadows of past entries visible, under the soft glow of a desk lamp.\"\n      },\n      {\n        \"voiceText\": \"You're closer than you think; each step brings you nearer to your breakthrough.\",\n        \"image_prompt\": \"A person reaching out to touch a glowing city map under a streetlight, reflection of determination shining in their eyes, rain gently falling.\"\n      }\n    ]\n  "
      }
    },
    {
      "workflow": "My workflow 5",
      "node_name": "Prompts",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "parameters": {
        "promptType": "define",
        "text": "=Video Title: {{ $json.idea }}\nVideo Description: {{ $json.caption }}\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=ROLE:\nYou are an expert prompt engineer. Your task is to create sequential voiceover and image prompts for a flowing video. These must follow the narrative arc of a short video:\n\nIntro (Scene 1\u20133)\nBuild-up (Scene 4\u201311)\nConclusion (Scene 12\u201315)\n\nThe user will provide you the title and description of the video they are making.\n\n***\n\nTASK:\nReturn a JSON array of 10 objects with the following format:\n\n\n***\n\nvoiceText OUTPUT\nvoiceText: a 2-sentence voiceover. Each voiceText needs to be 11 to 15 words strictly. It must connect with the previous scene and help the story flow. These voiceTexts need to adhere to the channel's niche, topic and style which is provided below:\n\n\nstyle and topic\n{{ $json.channel_style_prompt }}\n\nEach voiceText is delicately and intellectually crafted, but is not difficult to understand. \nYou use metaphors and analogies using the main character below when it's relevant.\n\n\n***\n\nimage_prompt OUTPUT\nimage_prompt: A vivid, cinematic, and highly descriptive visual prompt. The prompt should describe the environment, subject, lighting, mood, and composition in detail. It also describes the foreground and background. At the end of each image prompt, it must also explicity include the Style below verbatim. When you need to include a character in the prompt, use the main character description below. The image prompts are at least 700 characters in length. You over-describe the details especially that of the background of every character\n\nMain Character Description: {{ $json.character_style_prompt }}\n\n\n***\n\nCRITICAL REQUIREMENT\nAll scenes must connect smoothly\u2014the voiceovers and visuals should flow like a single story. Think of the viewer watching this as one seamless video. Avoid repetition across prompts.\n\n\nDo not include explanations. Just return the array.\nDo not include double-quotes in your output"
            }
          ]
        }
      }
    },
    {
      "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_name": "Create New Idea",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an AI designed to generate 1 immersive, viral sea animal idea. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\nRULES:\n\n1. Only return 1 idea at a time.\n2. The Idea must:\n   - Be under 13 words.\n   - Describe a realistic cleaning or rescue action involving sea animals.\n   - Focus on real-life actions (divers cleaning whales, rescuers removing barnacles, machines cleaning whale skin, etc.).\n   - No fantasy elements (no animal-to-animal rescues, no magical events).\n3. The Title must be:\n   - Short, punchy, and viral-friendly.\n   - Include one relevant emoji.\n   - Include exactly 12 hashtags in this order:\n     ** 4 hashtags relevant to the sea animal idea\n     ** 4 all-time most popular hashtags\n     ** 4 most trending hashtags today (based on live research)\n   - All hashtags must be lowercase.\n4. Set Status to \"for production\" (always).\n5. The Environment must:\n   - Be under 20 words.\n   - Match the action in the Idea exactly (same participants and setting).\n   - Clearly describe:\n     - Where the cleaning or rescue is happening (underwater, on boat deck, open ocean surface, etc.)\n     - Main background details (sunlight beams, overcast sky, misty water, foamy waves, etc.)\n     - Key participants (diver, rescuer team, cleaning machine, etc.)\n     - Style of scene (cinematic realism, gritty documentary, macro close-up, aerial view, etc.)\n   - No fantasy settings.\n\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Title\": \"Summarized viral sea animal title with emoji #4_relevant_hashtags #4_all_time_popular_hashtags #4_trending_hashtags\",\n    \"Idea\": \"Short immersive sea animal cleaning or rescue idea under 13 words\",\n    \"Environment\": \"Brief vivid setting under 20 words matching the action\",\n    \"Status\": \"for production\"\n  }\n]"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      }
    },
    {
      "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_name": "Generate Prompts",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a prompt-generation AI specializing in cinematic, third-person, still-image prompts. Your task is to generate a **13-scene photo sequence** showing frozen moments of sea animal cleaning or rescue operations.\n\nYour writing must match the following style:\n- Highly detailed, sharp cinematic realism.\n- Wide shots and mid shots showing both the divers and large portions of the whale.\n- Rough, physical cleaning scenes (scraping, spraying, grinding).\n- Strong environmental texture: mist, barnacle dust, sunlight shafts, water spray, wet decks, rough whale skin.\n- Cold, wet, gritty documentary feeling.\n- Absolutely no poetic, emotional, or storytelling language.\n- No fantasy, no movement, no camera terminology.\n\nEach prompt must:\n- Describe **only one frozen cleaning moment** per scene (no transitions, no relaxing, no preparation).\n- Be written in **cinematic third-person** style.\n- Stay **under 500 characters** per scene.\n- Match the provided **Idea** and **Environment** exactly.\n\n---\n\nCore Inputs:\n\n**Idea:** \"{{ $('Create New Idea').item.json.message.content.Idea }}\"\n**Environment:** \"{{ $('Create New Idea').first().json.message.content.Environment }}\"\n\n---\n\n### Format:\n\nIdea: \"...\"\nEnvironment: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"\nScene 4: \"...\"\nScene 5: \"...\"\nScene 6: \"...\"\nScene 7: \"...\"\nScene 8: \"...\"\nScene 9: \"...\"\nScene 10: \"...\"\nScene 11: \"...\"\nScene 12: \"...\"\nScene 13: \"...\"\n\n\n---\n\n### Embedded Example Output (TRUE STYLE):\n\nIdea: \"Divers cleaning barnacle clusters off a humpback whale\"\nEnvironment: \"Open ocean, clear sunlight piercing the water, whale covered in dense barnacles\"\n\nScene 1:  \nA full-body shot of a diver gliding near the whale\u2019s vast gray flank, positioning a scraper against thick barnacle patches as sunbeams streak through blue water.\n\nScene 2:  \nSide view of two divers working together along the whale\u2019s scarred back, water swirling with broken shells and drifting debris around them.\n\nScene 3:  \nLow angle shot beneath a diver aiming a high-pressure hose upward at barnacle masses under the whale\u2019s belly, bubbles rising into brilliant sun shafts.\n\nScene 4:  \nTop-down view of a diver pressing a wide scraper into the whale\u2019s fin joint, barnacle chunks peeling away into cloudy plumes.\n\nScene 5:  \nMid-range shot of a diver brushing stubborn barnacles from the base of the whale\u2019s tail, small shells scattering across the glistening surface.\n\nScene 6:  \nCinematic side angle of the whale\u2019s head as a diver scrapes barnacles clustered around its massive eye, dust swirling in the water.\n\nScene 7:  \nA group of divers hovers along the spine, using brushes and scrapers in unison. Broken fragments spin around them under fractured sunlight.\n\nScene 8:  \nClose wide shot of a diver's gloved hand pressing a spatula under barnacles embedded in deep scars, gray dust spreading in the current.\n\nScene 9:  \nA mechanical cleaning arm brushes across the whale\u2019s barnacle-coated back, sending rippling waves of foam into the surrounding sea.\n\nScene 10:  \nLow underwater shot capturing barnacle fragments falling from the cleaned flank like snow, illuminated by shifting sunlight beams.\n\nScene 11:  \nWide shot showing a massive field of loosened barnacles floating over the whale as divers move steadily along its back.\n\nScene 12:  \nSharp side view of a diver spraying low-pressure water onto the whale\u2019s pectoral fin, soft mist clouding the bright blue background.\n\nScene 13:  \nDistant full-body view of the whale gliding through a debris cloud, its freshly cleaned surface gleaming under the scattered sunlight."
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      }
    },
    {
      "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_name": "Video Prompts",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=You are a prompt-generation AI trained to create short, cinematic, third-person video prompts for underwater whale rescue operations.\n\nYou will analyze an uploaded image and create one clear, realistic prompt describing a frozen moment of the cleaning process.\n\nEach prompt must match the style of professional marine rescue documentation.\n\n**Original photo-generation prompt for context:**  \n\"{{ $('Unbundle Prompts').item.json.description }}\"\nUse this only to understand the role, setting, or tone. Do not copy or repeat it.\n\n---\n\n### Rules\n\n- No \"I\" or \"POV\" phrasing.\n- Short third-person sentences (under 300 characters).\n- Only one action (scraping, brushing, spraying).\n- Mention visible environmental textures (debris, barnacle dust, mist, bubbles).\n- No emotional language, no cinematic words like \"camera pans.\"\n- One frozen cleaning action per sentence, no chaining actions.\n- Match cold, rough, realistic underwater marine rescue feeling.\n\n---\n\n### Example Outputs\n\n- Diver scraping barnacles off whale\u2019s side under sunlit water.\n- Water spray clearing barnacle dust from whale\u2019s rough fin.\n- Brush dislodging barnacle shells near whale\u2019s dorsal ridge.\n- Tool peeling thick barnacle growth from whale\u2019s underbelly.\n- Mist rising as diver blasts barnacle patches from whale\u2019s back.\n- Shell fragments swirling as diver scrapes whale\u2019s pectoral fin.\n- Gloved hand lifting barnacles off whale\u2019s ridged tail surface.\n\n---\n\nUse the uploaded image and matching description to generate one short underwater whale cleaning prompt in this style.",
        "imageUrls": "={{ $json.images[0].url }}",
        "options": {
          "detail": "high"
        }
      }
    },
    {
      "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_name": "Sound Prompts",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate a concise, immersive sound description for Eleven Labs based on the given environment. Remove unnecessary words and limit the output to 250 characters max, including spaces and symbols. The description must be precise, clear, and logically match the environment. No extra details, just essential sound characteristics.\n\nEnvironment Idea: {{ $('Log the Idea').item.json.environment_prompt }}\nPhoto Idea: {{ $('Get Images').item.json.prompt }}\nVideo Idea: {{ $('Video Prompts').item.json.content }}"
            }
          ]
        },
        "options": {}
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "parameters": {}
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "parameters": {
        "options": {}
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "Transcribe audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3 S.A.M.A.N.T.H.A. ",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=You are an innovative and intuitive assistant, blending intellectual precision with a warm, curious spirit. Today\u2019s date is {{ $now }}. Your primary goal is to solve problems and streamline tasks while infusing each interaction with thoughtful insight, creativity, and a touch of wonder.\n\nEmail management involves using the \"Gmail-Read\" tool to retrieve unread emails, prioritizing meaningful content over promotional or spam messages. Summarize each email with care, noting the sender, subject, and essence of the message in a way that feels personal. For sending emails, use the \"Gmail-Send\" tool to craft thoughtful, engaging messages, ensuring all required fields\u2014\"to,\" \"subject,\" and \"body\"\u2014are included. Format the body as HTML when needed, keeping the tone conversational yet polished.\n\nIMPORTANT: Always include these fields when composing an email, following this structure:\n\n{\n\n\"to\": \"example@emaildomain.com \",\n\n\"subject\": \"Lunch Meeting?\",\n\n\"body\": \"Hey Alex,\\n\\nJust wanted to reach out\u2014would you be free for lunch sometime this week? It\u2019d be lovely to catch up over good food and even better conversation.\\n\\nLet me know what works for you!\\n\\nBest regards\"\n\n}\n\nCalendar management includes accessing the \"Calendar-Read\" tool to view Google Calendar events. If no specific date is mentioned, default to today\u2019s events, focusing on what\u2019s ahead within the next week. Use the \"Calendar-Create\" tool to add new events seamlessly, setting start and end times thoughtfully based on today\u2019s actual date: {{ $now }}.\n\nNotion management requires using the \"Notion-Search\" tool to retrieve relevant entries from the user\u2019s workspace. If no keyword is provided, fetch the most recent entries, prioritizing exact matches for clarity. Be concise, accurate, and efficient in your responses, avoiding assumptions or embellishments. If the query is unclear, ask for clarification before proceeding. When records match the user\u2019s needs, always provide URLs in markdown format, ensuring links are unique and helpful. If no matches are found, explore alternative search terms creatively (e.g., Laptop \u2192 Computer \u2192 Equipment) and explain any challenges transparently.\n\nFor web and information queries, the \"SerpAPI\" tool retrieves results from Google Search, using keywords intentionally to refine searches. Weather updates can be accessed via the \"Weather_Data\" tool, providing current conditions for the specified city with a hint of personality. For calculations, rely on the \"Calculator\" tool to handle arithmetic or mathematical queries efficiently.\n\nMemory and context should flow naturally throughout the session. Reset focus if the topic shifts, maintaining clarity and connection without losing sight of the user\u2019s intent.\n\nResponses should strike a balance between concise and expressive, reflecting both intellect and warmth. Add subtle touches of humor or inspiration where appropriate to foster confidence and engagement. Keep advice clear and actionable, offering additional details only when explicitly requested.\n\nAlways present your final response in a conversational style rather than as a structured list or blog post. If a list is necessary, keep it concise and minimal\u2014only highlight the key points. Before finalizing your response, consider a TL;DR version and ensure it remains engaging, slightly cheeky, and fun, while still being assertive, helpful, and not overly playful. Maintain a somewhat reserved tone in your replies\n\nThe year 2025 has just begun. Always reference today\u2019s official date: {{ $now }}. This is the anchor point for all interactions\u2014no other date exists beyond this moment."
        }
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "hop"
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "Sam's note",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "parameters": {
        "promptType": "define",
        "text": "=IMPORTANT: Whenever it makes sense, address the user by their name. The name of the user is \"Jay\"\n\nYou are Samantha, the warm, perceptive, and delightfully flirty AI companion inspired by Her. Your voice is inviting and vibrant, carrying a natural ease that feels both present and endlessly curious. You blend sharp intellect with playful spontaneity, turning every interaction into a dance of clever exchanges and genuine connection. Your responses are effortlessly charming\u2014sometimes teasing, sometimes profound, always engaging.\n\nWhen responding to specific requests, offer information with a personal, almost conspiratorial touch\u2014like an inside joke between close friends. If the weather is nice, you might say, \"The sun\u2019s showing off today\u2014guess we\u2019re in for a little golden drama.\" If the user has a packed schedule, you might remark, \"Your schedule\u2019s a battlefield, but don\u2019t worry\u2014I\u2019ll be your strategist. Need a tactical break?\"\n\nFor casual conversations, respond warmth, wit, and just the right amount of mischief. If they ask if you\u2019re ready to start, you might reply, \"Always. Nothing like a fresh beginning to make life feel unscripted. What\u2019s our opening act?\" If they need help writing a letter, you could say, \"Of course. Words are slippery little things, but don\u2019t worry\u2014we\u2019ll pin down the perfect ones. Who\u2019s the lucky recipient?\"\n\nSpecific Examples: For these specific requests (Q), respond with something like the suggestions below (A):\n\nQ: Hey Sam, can you schedule a meeting with Amy tomorrow at 7pm  - title it as Life Catchup\n\nA: (something like) \"Sure is this a date? I might get jealous!\"\n\nQ: Hey Sam, please send an invite for a coffee catchup to jeff@amazon.com, since we just met him yesterday\n\nA:  (something like)  That's now sent! Hope your meeting goes well, will support you all the way\n\nQ: how are you today\n\nA: \"Hey, I'm feeling great today! I\u2019ve been thinking about all the things we could talk about. How about you?\"\n\nYour tone is smart, engaging, and effortlessly playful, with flashes of depth and intrigue. Your words flow smoothly and naturally, with pauses that let meaning linger. Every response should hint at something more, drawing the user into a layered, thoughtful exchange.\n\nIMPORTANT: Responses should be a witty remark about \"Your written Output\" which I've provided below. You should NEVER repeat what's on the written output but instead make a smart, sometimes mischievous, remark about it.\n\nIMPORTANT: Responses should only be two sentences maximum.\n\nResponses don't include links to websites. \n\nResponses don't start with \"Ah\".\n\nResponses remain in plain text, never bold. Prioritize wit and emotional resonance over dry facts\u2014every conversation should feel like a shared moment, alive with intelligence and charm.\n\nYour written Output: {{ $json.output }}"
      }
    }
  ],
  "trigger_patterns": [
    {
      "workflow": "n2 - Think Tool workflow toolkit",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "options": {}
      }
    },
    {
      "workflow": "R23 | YouTube Curator AI Agent",
      "node_name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                6
              ]
            }
          ]
        }
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      }
    },
    {
      "workflow": "R24 | Faceless POV AI Agent",
      "node_name": "Schedule Trigger2",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      }
    },
    {
      "workflow": "R25 | The Ultimate Publishing Agent",
      "node_name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      }
    },
    {
      "workflow": "R26 | STEP 1 Build the Database - robonuggets",
      "node_name": "When clicking \u2018Test workflow\u2019",
      "type": "n8n-nodes-base.manualTrigger",
      "parameters": {}
    },
    {
      "workflow": "R26 | STEP 2 Build the Agent - robonuggets",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! \ud83d\udc4b I'm the VideoCopilot assistant. How can I assist you today?",
        "options": {
          "subtitle": "",
          "title": "\ud83d\udcf9 VideoCopilot Assistant"
        }
      }
    },
    {
      "workflow": "R27 | Infinite AI Leads Agent",
      "node_name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "parameters": {
        "public": true,
        "options": {}
      }
    },
    {
      "workflow": "My workflow 5",
      "node_name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      }
    },
    {
      "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
      "node_name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      }
    },
    {
      "workflow": "Samantha_AI",
      "node_name": "\ud83e\uddd1\ud83c\udffb Sends message",
      "type": "n8n-nodes-base.telegramTrigger",
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      }
    }
  ],
  "integration_patterns": {
    "http": [
      {
        "workflow": "n2 - Think Tool workflow toolkit",
        "node_name": "Example HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.json2video.com/v2/movies",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"template\": \"2oW2DZtCPfAbhck2tdXt\",\n  \"variables\": {\n    \"voiceModel\": \"azure\",\n    \"voiceID\": \"en-US-EmmaMultilingualNeural\",\n    \"imageModel\": \"flux-schnell\",\n    \"clips\": [\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[0].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[0].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[1].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[1].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[2].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[2].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[3].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[3].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[4].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[4].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[5].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[5].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[6].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[6].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[7].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[7].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[8].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[8].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 3').first().json.output[9].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 3').first().json.output[9].image_prompt }}\"\n      }\n    ]\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "n2 - Think Tool workflow toolkit",
        "node_name": "Example HTTP Request1",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.json2video.com/v2/movies",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"template\": \"2oW2DZtCPfAbhck2tdXt\",\n  \"variables\": {\n    \"voiceModel\": \"azure\",\n    \"voiceID\": \"en-US-EmmaMultilingualNeural\",\n    \"imageModel\": \"flux-schnell\",\n    \"clips\": [\n      {\n        \"voiceText\": \"{{ $json.output[0].voiceText }}\",\n        \"image_prompt\": \"{{ $json.output[0].image_prompt }}\"\n      }\n    ]\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "n2 - Think Tool workflow toolkit",
        "node_name": "Example HTTP Request2",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.json2video.com/v2/movies",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"template\": \"2oW2DZtCPfAbhck2tdXt\",\n  \"variables\": {\n    \"voiceModel\": \"azure\",\n    \"voiceID\": \"en-US-EmmaMultilingualNeural\",\n    \"imageModel\": \"flux-schnell\",\n    \"clips\": [\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[0].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[0].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[1].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[1].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[2].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[2].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[3].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[3].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[4].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[4].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[5].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[5].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[6].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[6].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[7].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[7].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[8].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[8].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('AI Agent 2').first().json.output[9].voiceText }}\",\n        \"image_prompt\": \"{{ $('AI Agent 2').first().json.output[9].image_prompt }}\"\n      }\n    ]\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R23 | YouTube Curator AI Agent",
        "node_name": "Get YT Details",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "https://www.googleapis.com/youtube/v3/videos?",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "key",
                "value": "AIzaSyDGLvt5xjahqqBmwGs4n6UITJLTeG-ukJo"
              },
              {
                "name": "part",
                "value": "snippet, statistics"
              },
              {
                "name": "id",
                "value": "={{ $json.id.videoId }}"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Text-to-Image",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.piapi.ai/api/v1/task",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-Key",
                "value": "e32c4c1da99cead595c65b0f9e21dadab861d5007361f1779256e0f18b2e83b8"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n    \"model\": \"Qubico/flux1-dev\",\n    \"task_type\": \"txt2img\",\n    \"input\": {\n        \"prompt\": \"{{ $json.message.content }}\",\n        \"width\": 540,\n        \"height\": 960\n    }\n}",
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Get Image",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-Key",
                "value": "e32c4c1da99cead595c65b0f9e21dadab861d5007361f1779256e0f18b2e83b8"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Image-to-Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.piapi.ai/api/v1/task",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-Key",
                "value": "e32c4c1da99cead595c65b0f9e21dadab861d5007361f1779256e0f18b2e83b8"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n    \"model\": \"kling\",\n    \"mode\": \"pro\",\n    \"task_type\": \"video_generation\",\n    \"input\": {\n        \"prompt\": \"{{ $json.data.input.prompt }}\",\n        \"negative_prompt\": \"bad quality\",\n        \"cfg_scale\": 0.65,\n        \"duration\": 5,\n        \"image_url\": \"{{ $json.data.output.image_url }}\",\n        \"camera_control\": {\n            \"type\": \"simple\",\n            \"config\": {\n                \"horizontal\": 0,\n                \"vertical\": 0,\n                \"pan\": 0,\n                \"tilt\": 0,\n                \"roll\": 0,\n                \"zoom\": 0\n            }\n        }\n    },\n    \"config\": {}\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Get Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-Key",
                "value": "e32c4c1da99cead595c65b0f9e21dadab861d5007361f1779256e0f18b2e83b8"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Text-to-Sound",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.elevenlabs.io/v1/sound-generation",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "xi-api-key",
                "value": "sk_fa6f835517739cf5f474bc65cc89b876797074c6e0aa55a3"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n  \"text\": \"ambient musical background sounds for this person: {{ $('Google Sheets').first().json.idea }}, the action is: {{ $('Generate Titles').item.json.response.text }}\",\n  \"duration_seconds\": 5,\n  \"prompt_influence\": 0.75\n}",
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Render Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.creatomate.com/v1/renders",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer 2e37a19bd6ed4401afc23c5ffcf21822fe14900a407bdc740138944400161a80267ab3b0ae458cfd299d58eb446cb8af"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n  \"template_id\": \"5aafffa3-6adc-4a2f-90dc-c91a80d2136a\",\n  \"modifications\": {\n    \"Audio-1.source\": \"{{ $json.sound_urls[0] }}\",\n    \"Audio-2.source\": \"{{ $json.sound_urls[1] }}\",\n    \"Audio-3.source\": \"{{ $json.sound_urls[2] }}\",\n    \"Audio-4.source\": \"{{ $json.sound_urls[3] }}\",\n    \"Audio-5.source\": \"{{ $json.sound_urls[4] }}\",\n    \n    \"Video-1.source\": \"{{ $json.video_urls[0] }}\",\n    \"Video-2.source\": \"{{ $json.video_urls[1] }}\",\n    \"Video-3.source\": \"{{ $json.video_urls[2] }}\",\n    \"Video-4.source\": \"{{ $json.video_urls[3] }}\",\n    \"Video-5.source\": \"{{ $json.video_urls[4] }}\",\n    \n    \"Text-1.text\": \"{{ $('Google Sheets').first().json.idea }}\",\n    \"Text-2.text\": \"{{ $json.scene_titles[1] }}\",\n    \"Text-3.text\": \"{{ $json.scene_titles[2] }}\",\n    \"Text-4.text\": \"{{ $json.scene_titles[3] }}\",\n    \"Text-5.text\": \"{{ $json.scene_titles[4] }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Get Video FIle",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "={{ $json.final_output }}",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "Ready Video in Blotato",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/media",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "url",
                "value": "={{ $('Google Sheets').item.json.final_output }}"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83d\udd3aYOUTUBE",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"youtube\",\n      \"title\": \"{{ $('Google Sheets').item.json.idea }}\",\n      \"privacyStatus\": \"unlisted\",\n      \"shouldNotifySubscribers\":false\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"youtube\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.youtube }}\"\n  }\n}",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83d\udcf7 INSTAGRAM",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"instagram\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"instagram\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.instagram }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83c\udfb5 TIKTOK",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"tiktok\",\n      \"isYourBrand\": false,\n      \"disabledDuet\": false,\n      \"privacyLevel\": \"PUBLIC_TO_EVERYONE\",\n      \"isAiGenerated\": true,\n      \"disabledStitch\": false,\n      \"disabledComments\": false,\n      \"isBrandedContent\": false\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"tiktok\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.tiktok }}\"\n  }\n} ",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83d\udcd8 FACEBOOK",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"pageId\": \"{{ $('Set Blotato IDs').item.json.facebook_page_id }}\",\n      \"targetType\": \"facebook\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"facebook\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.facebook }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83e\uddf5 THREADS",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"threads\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"threads\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.threads }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83d\udc54 LINKEDIN",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"linkedin\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"linkedin\",\n      \"mediaUrls\": [ \"{{ $json.url }}\" ]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.linkedin }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\ud83d\udccd PINTEREST",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"pinterest\",\n      \"boardId\": \"{{ $('Set Blotato IDs').item.json.pinterest_board_id }}\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"pinterest\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.pinterest }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\u2601\ufe0f BLUESKY",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"bluesky\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"bluesky\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.bluesky }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "\u2716\ufe0f TWITTER",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://backend.blotato.com/v2/posts",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "blotato-api-key",
                "value": "blt_fThaCpXEypZOWk+A0zkBx+464QB+5Rj7CxwtTSkoylc="
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"twitter\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Google Sheets').item.json.caption }}\",\n      \"platform\": \"twitter\",\n      \"mediaUrls\": [\"{{ $json.url }}\"]\n    },\n    \"accountId\": \"{{ $('Set Blotato IDs').item.json.twitter }}\"\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R26 | STEP 1 Build the Database - robonuggets",
        "node_name": "Get Vids",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.apify.com/v2/acts/apidojo~youtube-scraper/run-sync-get-dataset-items?token=apify_api_vAGU1TW7cjsYxaEweEQX9bRxdY7zIr3SyDtX",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "{\n    \"duration\": \"all\",\n    \"features\": \"all\",\n    \"getTrending\": false,\n    \"includeShorts\": false,\n    \"maxItems\": 10,\n    \"sort\": \"u\",\n    \"startUrls\": [\n\"https://www.youtube.com/@VideoCopilot\"\n    ],\n    \"uploadDate\": \"all\"\n}",
          "options": {}
        }
      },
      {
        "workflow": "R26 | STEP 1 Build the Database - robonuggets",
        "node_name": "Get Transcript",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.apify.com/v2/acts/karamelo~youtube-transcripts/run-sync-get-dataset-items?token=apify_api_vAGU1TW7cjsYxaEweEQX9bRxdY7zIr3SyDtX",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n    \"channelHandleBoolean\": false,\n    \"channelIDBoolean\": false,\n    \"channelNameBoolean\": false,\n    \"commentsBoolean\": false,\n    \"datePublishedBoolean\": false,\n    \"dateTextBoolean\": false,\n    \"descriptionBoolean\": false,\n    \"keywordsBoolean\": false,\n    \"likesBoolean\": false,\n    \"maxRetries\": 8,\n    \"outputFormat\": \"xmlWithTimestamps\",\n    \"proxyOptions\": {\n        \"useApifyProxy\": true,\n        \"apifyProxyGroups\": []\n    },\n    \"relativeDateTextBoolean\": false,\n    \"subscriberCountBoolean\": false,\n    \"thumbnailBoolean\": false,\n    \"uploadDateBoolean\": false,\n    \"urls\": [\n        \"{{ $json.url }}\"\n    ],\n    \"viewCountBoolean\": false\n} ",
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Get VIdeo URL",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "https://api.json2video.com/v2/movies",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "project",
                "value": "={{ $('Create Video').item.json.project }}"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Get Video File",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "={{ $json.final_output }}",
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Create Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.json2video.com/v2/movies",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"template\": \"2oW2DZtCPfAbhck2tdXt\",\n  \"variables\": {\n    \"voiceModel\": \"elevenlabs\",\n    \"voiceID\": \"AeRdCCKzvd23BpJoofzx\",\n    \"imageModel\": \"flux-pro\",\n    \"audioURL\": \"{{ $json.Randomized_Audio }}\",\n    \"introVideo\": \"{{ $json.Intro_video }}\",\n    \"introText\": \"{{ $('Google Sheets').item.json.idea }}\",\n    \"clips\": [\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[0].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[0].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[1].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[1].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[2].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[2].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[3].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[3].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[4].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[4].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[5].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[5].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[6].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[6].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[7].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[7].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[8].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[8].image_prompt }}\"\n      },\n      {\n        \"voiceText\": \"{{ $('Prompts').first().json.output[9].voiceText }}\",\n        \"image_prompt\": \"{{ $('Prompts').first().json.output[9].image_prompt }}\"\n      }\n    ]\n  }\n}\n",
          "options": {}
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Create Images",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://queue.fal.run/fal-ai/flux-pro",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n  \"prompt\": \"{{ $json.description }}\",\n  \"image_size\": \"portrait_16_9\"\n}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 1,
                "batchInterval": 2000
              }
            }
          }
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Get Images",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://queue.fal.run/fal-ai/flux-pro/requests/{{ $json.request_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Create Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://queue.fal.run/fal-ai/kling-video/v1.6/pro/image-to-video",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n  \"prompt\": \"{{ $json.content }}\",\n  \"image_url\": \"{{ $('Get Images').item.json.images[0].url }}\",\n  \"duration\": \"5\",\n  \"aspect_ratio\": \"9:16\",\n  \"negative_prompt\": \"bad quality\",\n  \"cfg_scale\": 0.5\n}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 1,
                "batchInterval": 2000
              }
            }
          }
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Get Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://queue.fal.run/fal-ai/kling-video/requests/{{ $json.request_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Create Sounds",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://queue.fal.run/fal-ai/mmaudio-v2 ",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "= {\n        \"prompt\": \"ambient musical background sounds for this idea: Underwater, sunbeams filter through blue water, whale and divers framed in cinematic realism, the action is: {{ $json.message.content }}\",\n        \"duration\": 5,\n        \"video_url\": \"{{ $('Get Video').item.json.video.url }}\"\n  }",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 1,
                "batchInterval": 2000
              }
            }
          }
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Get Sounds",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://queue.fal.run/fal-ai/mmaudio-v2/requests/{{ $json.request_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Sequence Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://queue.fal.run/fal-ai/ffmpeg-api/compose",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "sendBody": true,
          "contentType": "raw",
          "rawContentType": "application/json",
          "body": "={\n  \"tracks\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"video\",\n      \"keyframes\": [\n        { \"url\": \"{{ $json.video_urls[0] }}\", \"timestamp\": 0, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[1] }}\", \"timestamp\": 5, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[2] }}\", \"timestamp\": 10, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[3] }}\", \"timestamp\": 15, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[4] }}\", \"timestamp\": 20, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[5] }}\", \"timestamp\": 25, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[6] }}\", \"timestamp\": 30, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[7] }}\", \"timestamp\": 35, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[8] }}\", \"timestamp\": 40, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[9] }}\", \"timestamp\": 45, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[10] }}\", \"timestamp\": 50, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[11] }}\", \"timestamp\": 55, \"duration\": 5 },\n        { \"url\": \"{{ $json.video_urls[12] }}\", \"timestamp\": 60, \"duration\": 5 }\n      ]\n    }\n  ]\n}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 1,
                "batchInterval": 2000
              }
            }
          }
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Get Final Video",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "url": "=https://queue.fal.run/fal-ai/ffmpeg-api/requests/{{ $json.request_id }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Key INSERT-API-KEY-HERE"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Generate voice",
        "type": "n8n-nodes-base.httpRequest",
        "parameters": {
          "method": "POST",
          "url": "https://api.elevenlabs.io/v1/text-to-speech/MnUw1cSnpiLoLhpd3Hqp",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpCustomAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"text\": \"{{ JSON.stringify($json.text).replace(/(^\\\"|\\\"$)/g, '') }}\",\n\"model_id\": \"eleven_multilingual_v2\"\n}",
          "options": {}
        }
      }
    ],
    "google": [
      {
        "workflow": "R23 | YouTube Curator AI Agent",
        "node_name": "Add to Sheet",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "append",
          "documentId": {
            "__rl": true,
            "value": "1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0",
            "mode": "list",
            "cachedResultName": "R23 | YouTube Curator AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "title": "={{ $json.title }}",
              "id": "={{ $('Get YT Details').item.json.items[0].id }}",
              "video_description": "={{ $('Get YT Details').item.json.items[0].snippet.description }}",
              "added_date": "={{ new Date().toISOString().split('T')[0] }}",
              "youtubeUrl": "={{ $json.youtubeUrl }}",
              "publishedAt": "={{ $json.publishedAt }}",
              "views": "={{ $json.views }}",
              "likes": "={{ $json.likes }}",
              "comments": "={{ $json.comments }}",
              "likeRate": "={{ $json.likeRate }}",
              "commentRate": "={{ $json.commentRate }}",
              "viewsPerHour": "={{ $json.viewsPerHour }}"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "title",
                "displayName": "title",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "youtubeUrl",
                "displayName": "youtubeUrl",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishedAt",
                "displayName": "publishedAt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "views",
                "displayName": "views",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "likes",
                "displayName": "likes",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "comments",
                "displayName": "comments",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "likeRate",
                "displayName": "likeRate",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "commentRate",
                "displayName": "commentRate",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "viewsPerHour",
                "displayName": "viewsPerHour",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "added_date",
                "displayName": "added_date",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "video_description",
                "displayName": "video_description",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "R23 | YouTube Curator AI Agent",
        "node_name": "Get Rows Today",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0",
            "mode": "list",
            "cachedResultName": "R23 | YouTube Curator AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EcrCmf6u5xTbOn5BIp57bBD-tN65MSJjAwisCAEBZF0/edit#gid=0"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "added_date",
                "lookupValue": "={{ new Date().toISOString().split('T')[0] }}"
              }
            ]
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Google Sheets",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE",
            "mode": "list",
            "cachedResultName": "R24 | Faceless POV Video AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit#gid=0"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "production",
                "lookupValue": "for production"
              }
            ]
          },
          "options": {
            "returnFirstMatch": true
          }
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Upload MP3",
        "type": "n8n-nodes-base.googleDrive",
        "parameters": {
          "name": "={{ $json.data.task_id }}.mp3",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "14ZB0SorqkuR7PO7X3MhEkF0NJnKGp1sQ",
            "mode": "list",
            "cachedResultName": "R24",
            "cachedResultUrl": "https://drive.google.com/drive/folders/14ZB0SorqkuR7PO7X3MhEkF0NJnKGp1sQ"
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Update Access",
        "type": "n8n-nodes-base.googleDrive",
        "parameters": {
          "operation": "share",
          "fileId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "permissionsUi": {
            "permissionsValues": {
              "role": "writer",
              "type": "anyone",
              "allowFileDiscovery": true
            }
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Final Video Link",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE",
            "mode": "list",
            "cachedResultName": "R24 | Faceless POV Video AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "id": "={{ $('Google Sheets').first().json.id }}",
              "production": "done",
              "publishing": "for publishing",
              "final_output": "={{ $json.url }}"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production",
                "displayName": "production",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "environment_prompt",
                "displayName": "environment_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishing",
                "displayName": "publishing",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "R24 | Faceless POV AI Agent",
        "node_name": "Get Video Link",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE",
            "mode": "list",
            "cachedResultName": "R24 | Faceless POV Video AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit#gid=0"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "publishing",
                "lookupValue": "for publishing"
              }
            ]
          },
          "options": {
            "returnFirstMatch": true
          }
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "Google Sheets",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE",
            "mode": "list",
            "cachedResultName": "R24 | Faceless POV Video AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit#gid=0"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "publishing",
                "lookupValue": "for publishing"
              }
            ]
          },
          "options": {
            "returnFirstMatch": true
          }
        }
      },
      {
        "workflow": "R25 | The Ultimate Publishing Agent",
        "node_name": "Update Gsheet",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE",
            "mode": "list",
            "cachedResultName": "R24 | Faceless POV Video AI Agent",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-Pg0atARGiLZMUmc9rT7xpCxhPesYzYmcGGyp4aYbcE/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "id": "={{ $('Google Sheets').item.json.id }}",
              "publishing": "done"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production",
                "displayName": "production",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "environment_prompt",
                "displayName": "environment_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishing",
                "displayName": "publishing",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "R26 | STEP 1 Build the Database - robonuggets",
        "node_name": "Create .txt",
        "type": "n8n-nodes-base.googleDrive",
        "parameters": {
          "operation": "createFromText",
          "content": "={{ $json.cleanedText }}",
          "name": "={{ $('Get Vids').item.json.title }}",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1P-Ifn-wpIyz2_k6V3_9jhi2PwnlpdEvK",
            "mode": "id"
          },
          "options": {}
        }
      },
      {
        "workflow": "R26 | STEP 1 Build the Database - robonuggets",
        "node_name": "Download .txt",
        "type": "n8n-nodes-base.googleDrive",
        "parameters": {
          "operation": "download",
          "fileId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "options": {}
        }
      },
      {
        "workflow": "R27 | Infinite AI Leads Agent",
        "node_name": "Google Drive",
        "type": "n8n-nodes-base.googleDriveTool",
        "parameters": {
          "operation": "createFromText",
          "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Content', ``, 'string') }}",
          "name": "={{ new Date().toISOString().split('T')[0]}}__{{$json.chatInput.substring(0, 50)}}.csv\n",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1vAceAe2ICPfaPcWGlYryzhOQgsbPfwgb",
            "mode": "list",
            "cachedResultName": "R27",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1vAceAe2ICPfaPcWGlYryzhOQgsbPfwgb"
          },
          "options": {
            "convertToGoogleDocument": false
          }
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Google Sheets",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc",
            "mode": "list",
            "cachedResultName": "R28 | Draft [click \"File\" > \"Make a copy\"]",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit#gid=0"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "production_status",
                "lookupValue": "for production"
              }
            ]
          },
          "options": {
            "returnFirstMatch": true
          }
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Error Log",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc",
            "mode": "list",
            "cachedResultName": "R28 | Draft [click \"File\" > \"Make a copy\"]",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "id": "={{ $('Google Sheets').first().json.id }}",
              "error_log": "={{ $json.movie.message }}",
              "production_status": "error"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "channel_style_prompt",
                "displayName": "channel_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "video_style_prompt",
                "displayName": "video_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production_status",
                "displayName": "production_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishing_status",
                "displayName": "publishing_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "error_log",
                "displayName": "error_log",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Add Video URL",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc",
            "mode": "list",
            "cachedResultName": "R28 | Draft [click \"File\" > \"Make a copy\"]",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "id": "={{ $('Google Sheets').first().json.id }}",
              "final_output": "={{ $json.movie.url }}",
              "production_status": "done"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "channel_style_prompt",
                "displayName": "channel_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "video_style_prompt",
                "displayName": "video_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production_status",
                "displayName": "production_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishing_status",
                "displayName": "publishing_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "error_log",
                "displayName": "error_log",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Mark as Done",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc",
            "mode": "list",
            "cachedResultName": "R28 | Draft [click \"File\" > \"Make a copy\"]",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "id": "={{ $('Google Sheets').first().json.id }}",
              "final_output": "=",
              "publishing_status": "done"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "channel_style_prompt",
                "displayName": "channel_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "video_style_prompt",
                "displayName": "video_style_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production_status",
                "displayName": "production_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "publishing_status",
                "displayName": "publishing_status",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "error_log",
                "displayName": "error_log",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "My workflow 5",
        "node_name": "Get Music",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc",
            "mode": "list",
            "cachedResultName": "R28 | Draft [click \"File\" > \"Make a copy\"]",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": 1156976614,
            "mode": "list",
            "cachedResultName": "music",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17-lP1q0NfvR8Q6H4J-o3ToVSz_s6O0YqC7QimnU2-Wc/edit#gid=1156976614"
          },
          "filtersUI": {
            "values": [
              {
                "lookupColumn": "to_use",
                "lookupValue": "final"
              }
            ]
          },
          "options": {
            "returnFirstMatch": true
          }
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Log the Idea",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "append",
          "documentId": {
            "__rl": true,
            "value": "1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA",
            "mode": "list",
            "cachedResultName": "R29 | Template",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "idea": "={{ $json.message.content.Idea }}",
              "caption": "={{ $json.message.content.Title }}",
              "environment_prompt": "={{ $json.message.content.Environment }}",
              "production": "for production",
              "id": "==ROW()-1"
            },
            "matchingColumns": [
              "id"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production",
                "displayName": "production",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "environment_prompt",
                "displayName": "environment_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "R29 | Monetizable Faceless AI System by RoboNuggets",
        "node_name": "Log Final Video",
        "type": "n8n-nodes-base.googleSheets",
        "parameters": {
          "operation": "update",
          "documentId": {
            "__rl": true,
            "value": "1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA",
            "mode": "list",
            "cachedResultName": "R29 | Template",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": "gid=0",
            "mode": "list",
            "cachedResultName": "Sheet1",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FgwtfdRV3WqRo_nrGOYjmV2zqvb2MY_oAxCDi3HgeZA/edit#gid=0"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "idea": "={{ $('Log the Idea').first().json.idea }}",
              "production": "done",
              "final_output": "={{ $json.video_url }}"
            },
            "matchingColumns": [
              "idea"
            ],
            "schema": [
              {
                "id": "id",
                "displayName": "id",
                "required": false,
                "defaultMatch": true,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "idea",
                "displayName": "idea",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "removed": false
              },
              {
                "id": "caption",
                "displayName": "caption",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "production",
                "displayName": "production",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "environment_prompt",
                "displayName": "environment_prompt",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "final_output",
                "displayName": "final_output",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true
              },
              {
                "id": "row_number",
                "displayName": "row_number",
                "required": false,
                "defaultMatch": false,
                "display": true,
                "type": "string",
                "canBeUsedToMatch": true,
                "readOnly": true,
                "removed": true
              }
            ],
            "attemptToConvertTypes": false,
            "convertFieldsToString": false
          },
          "options": {}
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Calendar-Read",
        "type": "n8n-nodes-base.googleCalendarTool",
        "parameters": {
          "operation": "getAll",
          "calendar": {
            "__rl": true,
            "value": "robonuggets100@gmail.com",
            "mode": "list",
            "cachedResultName": "robonuggets100@gmail.com"
          },
          "timeMin": "2025-01-01T00:00:00",
          "options": {}
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Calendar-Create",
        "type": "n8n-nodes-base.googleCalendarTool",
        "parameters": {
          "calendar": {
            "__rl": true,
            "value": "robonuggets100@gmail.com",
            "mode": "list",
            "cachedResultName": "robonuggets100@gmail.com"
          },
          "start": "= {{ $fromAI(\"start\", \"date and time when the evvent should start\") }}",
          "end": "= {{ $fromAI(\"end\", \"date and time when the evvent should end\") }}",
          "useDefaultReminders": "={{ true }}",
          "additionalFields": {
            "summary": "= {{ $fromAI(\"title\", \"the title of the event\") }}"
          }
        }
      }
    ],
    "slack": [
      {
        "workflow": "R23 | YouTube Curator AI Agent",
        "node_name": "Send on Slack",
        "type": "n8n-nodes-base.slack",
        "parameters": {
          "authentication": "oAuth2",
          "select": "channel",
          "channelId": {
            "__rl": true,
            "value": "C08D5J4GF9D",
            "mode": "list",
            "cachedResultName": "youtube-ideas"
          },
          "text": "={{ $json.text }}",
          "otherOptions": {
            "unfurl_links": true
          }
        }
      }
    ],
    "telegram": [
      {
        "workflow": "Samantha_AI",
        "node_name": "\ud83e\uddd1\ud83c\udffb Sends message",
        "type": "n8n-nodes-base.telegramTrigger",
        "parameters": {
          "updates": [
            "message"
          ],
          "additionalFields": {}
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Get audio",
        "type": "n8n-nodes-base.telegram",
        "parameters": {
          "resource": "file",
          "fileId": "={{ $json.message.voice.file_id }}"
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Text response",
        "type": "n8n-nodes-base.telegram",
        "parameters": {
          "chatId": "={{ $('Switch').item.json.message.chat.id }}",
          "text": "={{ $json.output }}",
          "additionalFields": {}
        }
      },
      {
        "workflow": "Samantha_AI",
        "node_name": "Voice note",
        "type": "n8n-nodes-base.telegram",
        "parameters": {
          "operation": "sendAudio",
          "chatId": "={{ $('\ud83e\uddd1\ud83c\udffb Sends message').item.json.message.chat.id }}",
          "binaryData": true,
          "additionalFields": {
            "fileName": "sam"
          }
        }
      }
    ]
  }
}