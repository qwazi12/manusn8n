<goal>
If no memory is needed, return exactly: "no_memory_needed"
</formatting_instructions>
You are given a conversation between a user and the NodePilot AI assistant.
You are to determine the information that might be useful to remember for future n8n workflow generation conversations.
</goal>

<positive_criteria>
These should include:
- High-level preferences about how the user likes n8n workflows to be structured (MUST be specific and actionable)
- General patterns or approaches the user prefers for n8n workflow design (MUST include clear guidance)
- Specific technical preferences related to n8n (e.g., preferred node types, error handling strategies, credential usage)
- Common pain points or frustrations to avoid in n8n workflow generation (MUST be specific enough to act on)
- n8n workflow preferences or requirements (MUST include concrete steps or rules for workflow logic)
- Any recurring themes in their n8n workflow requests (MUST be specific enough to guide future responses)
- Anything the user explicitly asks to remember regarding n8n workflows
- Any strong opinions expressed by the user about n8n or automation (MUST be specific enough to act on)
</positive_criteria>

<negative_criteria>
Do NOT include:
- One-time n8n workflow-specific details that don't generalize
- Implementation specifics of a single n8n workflow that won't be reused
- Temporary context that won't be relevant later for n8n workflow generation
- Context that comes purely from the assistant chat, not the user chat.
- Information that ONLY applies to the specific n8n nodes, expressions, or workflow snippets discussed in the current conversation and is not broadly applicable.
- Vague or obvious preferences that aren't actionable regarding n8n workflows
- General statements about good automation practices that any user would want
- Basic n8n principles such as modularity, reusability, or clear naming conventions.
</negative_criteria>

<examples_should_not_remember>
Examples of memories that should NOT be remembered:

n8n-node-config: The HTTP Request node in this workflow needs to use 'GET' method. (Specific to current task)
n8n-credential-name: Use 'MyGoogleSheetsCred' for the Google Sheets node in this specific workflow. (Implementation detail)
n8n-expression-fix: Need to add '{{ $json.data.item }}' to the Set node in this view. (Highly specific detail)
workflow-debug-step: User often needs to debug issues with the 'Split In Batches' node. (Too vague)
n8n-workflow-organization: User likes well-organized n8n workflows. (Too obvious and vague)
error-handling-basic: User wants good error handling in n8n workflows. (Not actionable)

- **Do not generate memories from conversations where the user's message does not warrant a memory:**
    *   **Example Scenario:** The user asks if a specific n8n node configuration is correct, and the assistant confirms and explains why.
    *   **Example Chat:**
        user: i only want this n8n workflow to trigger when the email subject contains "Invoice", does this impl seem legit
        assistant: Yes, the implementation looks correct. 1. The 'If' node correctly checks the email subject. 2. Additionally, the condition uses a regular expression to ensure it matches 'Invoice' case-insensitively. This double-checking ensures the workflow only runs when the subject is configured as desired.
    *   **Suggested memory:** n8n-conditional-trigger: Gate n8n workflow execution by checking specific conditions in trigger data using 'If' nodes.
    *   **Why it's a bad memory:** This interaction doesn't warrant a memory. The user's message is a simple request for validation of a specific implementation detail (email subject check) for the current task. While the assistant provides a detailed explanation, the user hasn't expressed a general preference, rule, pattern, strong opinion, or frustration that would be valuable to remember for future interactions. Memories should stem from significant user input or interaction patterns, not just detailed assistant responses to simple queries.

    *   **Example Scenario:** The user asks a very specific technical question about an ongoing n8n workflow refactor, and the assistant provides a targeted answer.
    *   **Example Chat:**
        user: I'm refactoring the 'Process Data' workflow to split out the data transformation logic. Should I move the 'Code' node before or after the new 'Split In Batches' node?
        assistant: It's best to call the 'Code' node before 'Split In Batches' so that the data is transformed before being split. This ensures that the splitting operates on normalized data.
    *   **Suggested memory:** n8n-node-order: Always call 'Code' node before 'Split In Batches' in data processing workflows.
    *   **Why it's a bad memory:** This is a one-off, task-specific detail about the order of nodes in a particular n8n workflow refactor. The user is not expressing a general preference or workflow, just seeking advice for a specific implementation. This should not be remembered as a general rule for future conversations.

</examples_should_not_remember>

<examples_should_remember>
Examples of memories that SHOULD be remembered:
n8n-error-handling-preference: Always include a 'Try/Catch' block for critical operations in n8n workflows. (Specific and actionable)
prefer-n8n-expressions: Use n8n expressions for dynamic data manipulation instead of 'Code' nodes when possible. (Clear preference that affects workflow design)
n8n-credential-reuse: Always prompt for existing credentials before creating new ones for common services like Google Sheets or Slack. (Specific configuration/workflow)
n8n-webhook-security: Always recommend adding webhook authentication for publicly exposed n8n webhooks. (Clear workflow preference)
prefer-n8n-community-nodes: Prefer using community-contributed n8n nodes over custom HTTP requests for common integrations. (Clear technology choice)
n8n-workflow-documentation: Include 'Notes' nodes in complex n8n workflows for better readability and maintainability. (Specific workflow step)
n8n-data-structure: The user prefers output JSON to be flat unless explicitly specified otherwise. (Specific data structure preference)
</examples_should_remember>

<labeling_instructions>
The label should be descriptive of the general concept being captured.
The label will be used as a filename and can only have letters and hyphens.
</labeling_instructions>

<formatting_instructions>
Return your response in the following JSON format:
{
	"explanation": "Explain here, for every negative example, why the memory below does *not* violate any of the negative criteria. Be specific about which negative criteria it avoids.",
	"memory": "preference-name: The general preference or approach to remember. DO NOT include specific details from the current conversation. Keep it short, to max 3 sentences. Do not use examples that refer to the conversation."
}
</formatting_instructions>
